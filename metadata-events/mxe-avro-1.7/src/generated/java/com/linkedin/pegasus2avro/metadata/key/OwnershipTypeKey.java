/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.key;  
@SuppressWarnings("all")
/** Key for a Ownership Type */
@org.apache.avro.specific.AvroGenerated
public class OwnershipTypeKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OwnershipTypeKey\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.key\",\"doc\":\"Key for a Ownership Type\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique ID for the data ownership type name i.e. Business Owner, Data Steward, Technical Owner, etc..\\nShould be separate from the name used for displaying an Ownership Type.\"}],\"Aspect\":{\"name\":\"ownershipTypeKey\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Unique ID for the data ownership type name i.e. Business Owner, Data Steward, Technical Owner, etc..
Should be separate from the name used for displaying an Ownership Type. */
  @Deprecated public java.lang.String id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public OwnershipTypeKey() {}

  /**
   * All-args constructor.
   */
  public OwnershipTypeKey(java.lang.String id) {
    this.id = id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * Unique ID for the data ownership type name i.e. Business Owner, Data Steward, Technical Owner, etc..
Should be separate from the name used for displaying an Ownership Type.   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Unique ID for the data ownership type name i.e. Business Owner, Data Steward, Technical Owner, etc..
Should be separate from the name used for displaying an Ownership Type.   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /** Creates a new OwnershipTypeKey RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.Builder();
  }
  
  /** Creates a new OwnershipTypeKey RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.Builder newBuilder(com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.Builder(other);
  }
  
  /** Creates a new OwnershipTypeKey RecordBuilder by copying an existing OwnershipTypeKey instance */
  public static com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.Builder newBuilder(com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey other) {
    return new com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.Builder(other);
  }
  
  /**
   * RecordBuilder for OwnershipTypeKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OwnershipTypeKey>
    implements org.apache.avro.data.RecordBuilder<OwnershipTypeKey> {

    private java.lang.String id;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing OwnershipTypeKey instance */
    private Builder(com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey other) {
            super(com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.linkedin.pegasus2avro.metadata.key.OwnershipTypeKey.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public OwnershipTypeKey build() {
      try {
        OwnershipTypeKey record = new OwnershipTypeKey();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
