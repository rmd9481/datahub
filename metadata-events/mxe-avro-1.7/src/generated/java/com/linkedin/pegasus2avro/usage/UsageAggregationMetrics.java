/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.usage;  
@SuppressWarnings("all")
/** Metrics for usage data for a given resource and bucket. Not all fields
make sense for all buckets, so every field is optional. */
@org.apache.avro.specific.AvroGenerated
public class UsageAggregationMetrics extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UsageAggregationMetrics\",\"namespace\":\"com.linkedin.pegasus2avro.usage\",\"doc\":\"Metrics for usage data for a given resource and bucket. Not all fields\\nmake sense for all buckets, so every field is optional.\",\"fields\":[{\"name\":\"uniqueUserCount\",\"type\":[\"null\",\"int\"],\"doc\":\" Unique user count \",\"default\":null},{\"name\":\"users\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UserUsageCounts\",\"doc\":\" Records a single user's usage counts for a given resource \",\"fields\":[{\"name\":\"user\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"count\",\"type\":\"int\"},{\"name\":\"userEmail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\" If user_email is set, we attempt to resolve the user's urn upon ingest \",\"default\":null}]}}],\"doc\":\" Users within this bucket, with frequency counts \",\"default\":null},{\"name\":\"totalSqlQueries\",\"type\":[\"null\",\"int\"],\"doc\":\" Total SQL query count \",\"default\":null},{\"name\":\"topSqlQueries\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\" Frequent SQL queries; mostly makes sense for datasets in SQL databases \",\"default\":null},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FieldUsageCounts\",\"doc\":\" Records field-level usage counts for a given resource \",\"fields\":[{\"name\":\"fieldName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"count\",\"type\":\"int\"}]}}],\"doc\":\" Field-level usage stats \",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /**  Unique user count  */
  @Deprecated public java.lang.Integer uniqueUserCount;
  /**  Users within this bucket, with frequency counts  */
  @Deprecated public java.util.List<com.linkedin.pegasus2avro.usage.UserUsageCounts> users;
  /**  Total SQL query count  */
  @Deprecated public java.lang.Integer totalSqlQueries;
  /**  Frequent SQL queries; mostly makes sense for datasets in SQL databases  */
  @Deprecated public java.util.List<java.lang.String> topSqlQueries;
  /**  Field-level usage stats  */
  @Deprecated public java.util.List<com.linkedin.pegasus2avro.usage.FieldUsageCounts> fields;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UsageAggregationMetrics() {}

  /**
   * All-args constructor.
   */
  public UsageAggregationMetrics(java.lang.Integer uniqueUserCount, java.util.List<com.linkedin.pegasus2avro.usage.UserUsageCounts> users, java.lang.Integer totalSqlQueries, java.util.List<java.lang.String> topSqlQueries, java.util.List<com.linkedin.pegasus2avro.usage.FieldUsageCounts> fields) {
    this.uniqueUserCount = uniqueUserCount;
    this.users = users;
    this.totalSqlQueries = totalSqlQueries;
    this.topSqlQueries = topSqlQueries;
    this.fields = fields;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uniqueUserCount;
    case 1: return users;
    case 2: return totalSqlQueries;
    case 3: return topSqlQueries;
    case 4: return fields;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uniqueUserCount = (java.lang.Integer)value$; break;
    case 1: users = (java.util.List<com.linkedin.pegasus2avro.usage.UserUsageCounts>)value$; break;
    case 2: totalSqlQueries = (java.lang.Integer)value$; break;
    case 3: topSqlQueries = (java.util.List<java.lang.String>)value$; break;
    case 4: fields = (java.util.List<com.linkedin.pegasus2avro.usage.FieldUsageCounts>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uniqueUserCount' field.
   *  Unique user count    */
  public java.lang.Integer getUniqueUserCount() {
    return uniqueUserCount;
  }

  /**
   * Sets the value of the 'uniqueUserCount' field.
   *  Unique user count    * @param value the value to set.
   */
  public void setUniqueUserCount(java.lang.Integer value) {
    this.uniqueUserCount = value;
  }

  /**
   * Gets the value of the 'users' field.
   *  Users within this bucket, with frequency counts    */
  public java.util.List<com.linkedin.pegasus2avro.usage.UserUsageCounts> getUsers() {
    return users;
  }

  /**
   * Sets the value of the 'users' field.
   *  Users within this bucket, with frequency counts    * @param value the value to set.
   */
  public void setUsers(java.util.List<com.linkedin.pegasus2avro.usage.UserUsageCounts> value) {
    this.users = value;
  }

  /**
   * Gets the value of the 'totalSqlQueries' field.
   *  Total SQL query count    */
  public java.lang.Integer getTotalSqlQueries() {
    return totalSqlQueries;
  }

  /**
   * Sets the value of the 'totalSqlQueries' field.
   *  Total SQL query count    * @param value the value to set.
   */
  public void setTotalSqlQueries(java.lang.Integer value) {
    this.totalSqlQueries = value;
  }

  /**
   * Gets the value of the 'topSqlQueries' field.
   *  Frequent SQL queries; mostly makes sense for datasets in SQL databases    */
  public java.util.List<java.lang.String> getTopSqlQueries() {
    return topSqlQueries;
  }

  /**
   * Sets the value of the 'topSqlQueries' field.
   *  Frequent SQL queries; mostly makes sense for datasets in SQL databases    * @param value the value to set.
   */
  public void setTopSqlQueries(java.util.List<java.lang.String> value) {
    this.topSqlQueries = value;
  }

  /**
   * Gets the value of the 'fields' field.
   *  Field-level usage stats    */
  public java.util.List<com.linkedin.pegasus2avro.usage.FieldUsageCounts> getFields() {
    return fields;
  }

  /**
   * Sets the value of the 'fields' field.
   *  Field-level usage stats    * @param value the value to set.
   */
  public void setFields(java.util.List<com.linkedin.pegasus2avro.usage.FieldUsageCounts> value) {
    this.fields = value;
  }

  /** Creates a new UsageAggregationMetrics RecordBuilder */
  public static com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder();
  }
  
  /** Creates a new UsageAggregationMetrics RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder newBuilder(com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder other) {
    return new com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder(other);
  }
  
  /** Creates a new UsageAggregationMetrics RecordBuilder by copying an existing UsageAggregationMetrics instance */
  public static com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder newBuilder(com.linkedin.pegasus2avro.usage.UsageAggregationMetrics other) {
    return new com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder(other);
  }
  
  /**
   * RecordBuilder for UsageAggregationMetrics instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UsageAggregationMetrics>
    implements org.apache.avro.data.RecordBuilder<UsageAggregationMetrics> {

    private java.lang.Integer uniqueUserCount;
    private java.util.List<com.linkedin.pegasus2avro.usage.UserUsageCounts> users;
    private java.lang.Integer totalSqlQueries;
    private java.util.List<java.lang.String> topSqlQueries;
    private java.util.List<com.linkedin.pegasus2avro.usage.FieldUsageCounts> fields;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uniqueUserCount)) {
        this.uniqueUserCount = data().deepCopy(fields()[0].schema(), other.uniqueUserCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.users)) {
        this.users = data().deepCopy(fields()[1].schema(), other.users);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalSqlQueries)) {
        this.totalSqlQueries = data().deepCopy(fields()[2].schema(), other.totalSqlQueries);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.topSqlQueries)) {
        this.topSqlQueries = data().deepCopy(fields()[3].schema(), other.topSqlQueries);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fields)) {
        this.fields = data().deepCopy(fields()[4].schema(), other.fields);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing UsageAggregationMetrics instance */
    private Builder(com.linkedin.pegasus2avro.usage.UsageAggregationMetrics other) {
            super(com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.SCHEMA$);
      if (isValidValue(fields()[0], other.uniqueUserCount)) {
        this.uniqueUserCount = data().deepCopy(fields()[0].schema(), other.uniqueUserCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.users)) {
        this.users = data().deepCopy(fields()[1].schema(), other.users);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalSqlQueries)) {
        this.totalSqlQueries = data().deepCopy(fields()[2].schema(), other.totalSqlQueries);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.topSqlQueries)) {
        this.topSqlQueries = data().deepCopy(fields()[3].schema(), other.topSqlQueries);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fields)) {
        this.fields = data().deepCopy(fields()[4].schema(), other.fields);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'uniqueUserCount' field */
    public java.lang.Integer getUniqueUserCount() {
      return uniqueUserCount;
    }
    
    /** Sets the value of the 'uniqueUserCount' field */
    public com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder setUniqueUserCount(java.lang.Integer value) {
      validate(fields()[0], value);
      this.uniqueUserCount = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uniqueUserCount' field has been set */
    public boolean hasUniqueUserCount() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uniqueUserCount' field */
    public com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder clearUniqueUserCount() {
      uniqueUserCount = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'users' field */
    public java.util.List<com.linkedin.pegasus2avro.usage.UserUsageCounts> getUsers() {
      return users;
    }
    
    /** Sets the value of the 'users' field */
    public com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder setUsers(java.util.List<com.linkedin.pegasus2avro.usage.UserUsageCounts> value) {
      validate(fields()[1], value);
      this.users = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'users' field has been set */
    public boolean hasUsers() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'users' field */
    public com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder clearUsers() {
      users = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'totalSqlQueries' field */
    public java.lang.Integer getTotalSqlQueries() {
      return totalSqlQueries;
    }
    
    /** Sets the value of the 'totalSqlQueries' field */
    public com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder setTotalSqlQueries(java.lang.Integer value) {
      validate(fields()[2], value);
      this.totalSqlQueries = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'totalSqlQueries' field has been set */
    public boolean hasTotalSqlQueries() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'totalSqlQueries' field */
    public com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder clearTotalSqlQueries() {
      totalSqlQueries = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'topSqlQueries' field */
    public java.util.List<java.lang.String> getTopSqlQueries() {
      return topSqlQueries;
    }
    
    /** Sets the value of the 'topSqlQueries' field */
    public com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder setTopSqlQueries(java.util.List<java.lang.String> value) {
      validate(fields()[3], value);
      this.topSqlQueries = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'topSqlQueries' field has been set */
    public boolean hasTopSqlQueries() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'topSqlQueries' field */
    public com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder clearTopSqlQueries() {
      topSqlQueries = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'fields' field */
    public java.util.List<com.linkedin.pegasus2avro.usage.FieldUsageCounts> getFields() {
      return fields;
    }
    
    /** Sets the value of the 'fields' field */
    public com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder setFields(java.util.List<com.linkedin.pegasus2avro.usage.FieldUsageCounts> value) {
      validate(fields()[4], value);
      this.fields = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'fields' field has been set */
    public boolean hasFields() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'fields' field */
    public com.linkedin.pegasus2avro.usage.UsageAggregationMetrics.Builder clearFields() {
      fields = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public UsageAggregationMetrics build() {
      try {
        UsageAggregationMetrics record = new UsageAggregationMetrics();
        record.uniqueUserCount = fieldSetFlags()[0] ? this.uniqueUserCount : (java.lang.Integer) defaultValue(fields()[0]);
        record.users = fieldSetFlags()[1] ? this.users : (java.util.List<com.linkedin.pegasus2avro.usage.UserUsageCounts>) defaultValue(fields()[1]);
        record.totalSqlQueries = fieldSetFlags()[2] ? this.totalSqlQueries : (java.lang.Integer) defaultValue(fields()[2]);
        record.topSqlQueries = fieldSetFlags()[3] ? this.topSqlQueries : (java.util.List<java.lang.String>) defaultValue(fields()[3]);
        record.fields = fieldSetFlags()[4] ? this.fields : (java.util.List<com.linkedin.pegasus2avro.usage.FieldUsageCounts>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
