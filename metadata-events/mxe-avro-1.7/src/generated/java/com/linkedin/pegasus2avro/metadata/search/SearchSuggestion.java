/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.search;  
@SuppressWarnings("all")
/** The model for the search result */
@org.apache.avro.specific.AvroGenerated
public class SearchSuggestion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SearchSuggestion\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.search\",\"doc\":\"The model for the search result\",\"fields\":[{\"name\":\"text\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The suggestion text for this search query\"},{\"name\":\"score\",\"type\":\"float\",\"doc\":\"The score for how close this suggestion is to the original search query.\\nThe closer to 1 means it is closer to the original query and 0 is further away.\"},{\"name\":\"frequency\",\"type\":\"long\",\"doc\":\"How many matches there are with the suggested text for the given field\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The suggestion text for this search query */
  @Deprecated public java.lang.String text;
  /** The score for how close this suggestion is to the original search query.
The closer to 1 means it is closer to the original query and 0 is further away. */
  @Deprecated public float score;
  /** How many matches there are with the suggested text for the given field */
  @Deprecated public long frequency;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SearchSuggestion() {}

  /**
   * All-args constructor.
   */
  public SearchSuggestion(java.lang.String text, java.lang.Float score, java.lang.Long frequency) {
    this.text = text;
    this.score = score;
    this.frequency = frequency;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return text;
    case 1: return score;
    case 2: return frequency;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: text = (java.lang.String)value$; break;
    case 1: score = (java.lang.Float)value$; break;
    case 2: frequency = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'text' field.
   * The suggestion text for this search query   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * The suggestion text for this search query   * @param value the value to set.
   */
  public void setText(java.lang.String value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'score' field.
   * The score for how close this suggestion is to the original search query.
The closer to 1 means it is closer to the original query and 0 is further away.   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * Sets the value of the 'score' field.
   * The score for how close this suggestion is to the original search query.
The closer to 1 means it is closer to the original query and 0 is further away.   * @param value the value to set.
   */
  public void setScore(java.lang.Float value) {
    this.score = value;
  }

  /**
   * Gets the value of the 'frequency' field.
   * How many matches there are with the suggested text for the given field   */
  public java.lang.Long getFrequency() {
    return frequency;
  }

  /**
   * Sets the value of the 'frequency' field.
   * How many matches there are with the suggested text for the given field   * @param value the value to set.
   */
  public void setFrequency(java.lang.Long value) {
    this.frequency = value;
  }

  /** Creates a new SearchSuggestion RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder();
  }
  
  /** Creates a new SearchSuggestion RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder newBuilder(com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder(other);
  }
  
  /** Creates a new SearchSuggestion RecordBuilder by copying an existing SearchSuggestion instance */
  public static com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder newBuilder(com.linkedin.pegasus2avro.metadata.search.SearchSuggestion other) {
    return new com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder(other);
  }
  
  /**
   * RecordBuilder for SearchSuggestion instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SearchSuggestion>
    implements org.apache.avro.data.RecordBuilder<SearchSuggestion> {

    private java.lang.String text;
    private float score;
    private long frequency;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.text)) {
        this.text = data().deepCopy(fields()[0].schema(), other.text);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.score)) {
        this.score = data().deepCopy(fields()[1].schema(), other.score);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.frequency)) {
        this.frequency = data().deepCopy(fields()[2].schema(), other.frequency);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SearchSuggestion instance */
    private Builder(com.linkedin.pegasus2avro.metadata.search.SearchSuggestion other) {
            super(com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.SCHEMA$);
      if (isValidValue(fields()[0], other.text)) {
        this.text = data().deepCopy(fields()[0].schema(), other.text);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.score)) {
        this.score = data().deepCopy(fields()[1].schema(), other.score);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.frequency)) {
        this.frequency = data().deepCopy(fields()[2].schema(), other.frequency);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'text' field */
    public java.lang.String getText() {
      return text;
    }
    
    /** Sets the value of the 'text' field */
    public com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder setText(java.lang.String value) {
      validate(fields()[0], value);
      this.text = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'text' field has been set */
    public boolean hasText() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'text' field */
    public com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder clearText() {
      text = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'score' field */
    public java.lang.Float getScore() {
      return score;
    }
    
    /** Sets the value of the 'score' field */
    public com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder setScore(float value) {
      validate(fields()[1], value);
      this.score = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'score' field has been set */
    public boolean hasScore() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'score' field */
    public com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder clearScore() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'frequency' field */
    public java.lang.Long getFrequency() {
      return frequency;
    }
    
    /** Sets the value of the 'frequency' field */
    public com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder setFrequency(long value) {
      validate(fields()[2], value);
      this.frequency = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'frequency' field has been set */
    public boolean hasFrequency() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'frequency' field */
    public com.linkedin.pegasus2avro.metadata.search.SearchSuggestion.Builder clearFrequency() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public SearchSuggestion build() {
      try {
        SearchSuggestion record = new SearchSuggestion();
        record.text = fieldSetFlags()[0] ? this.text : (java.lang.String) defaultValue(fields()[0]);
        record.score = fieldSetFlags()[1] ? this.score : (java.lang.Float) defaultValue(fields()[1]);
        record.frequency = fieldSetFlags()[2] ? this.frequency : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
