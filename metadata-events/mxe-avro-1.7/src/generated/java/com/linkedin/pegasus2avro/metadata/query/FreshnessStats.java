/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.query;  
@SuppressWarnings("all")
/** Stats that describe the freshness of a dataset or query result.
Useful to describe consistency and staleness of results when served
out of a cache or other eventually consistent system. */
@org.apache.avro.specific.AvroGenerated
public class FreshnessStats extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FreshnessStats\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.query\",\"doc\":\"Stats that describe the freshness of a dataset or query result.\\nUseful to describe consistency and staleness of results when served\\nout of a cache or other eventually consistent system.\",\"fields\":[{\"name\":\"cached\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"systemFreshness\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"long\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Boolean cached;
  @Deprecated public java.util.Map<java.lang.String,java.lang.Long> systemFreshness;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public FreshnessStats() {}

  /**
   * All-args constructor.
   */
  public FreshnessStats(java.lang.Boolean cached, java.util.Map<java.lang.String,java.lang.Long> systemFreshness) {
    this.cached = cached;
    this.systemFreshness = systemFreshness;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cached;
    case 1: return systemFreshness;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cached = (java.lang.Boolean)value$; break;
    case 1: systemFreshness = (java.util.Map<java.lang.String,java.lang.Long>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cached' field.
   */
  public java.lang.Boolean getCached() {
    return cached;
  }

  /**
   * Sets the value of the 'cached' field.
   * @param value the value to set.
   */
  public void setCached(java.lang.Boolean value) {
    this.cached = value;
  }

  /**
   * Gets the value of the 'systemFreshness' field.
   */
  public java.util.Map<java.lang.String,java.lang.Long> getSystemFreshness() {
    return systemFreshness;
  }

  /**
   * Sets the value of the 'systemFreshness' field.
   * @param value the value to set.
   */
  public void setSystemFreshness(java.util.Map<java.lang.String,java.lang.Long> value) {
    this.systemFreshness = value;
  }

  /** Creates a new FreshnessStats RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder();
  }
  
  /** Creates a new FreshnessStats RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder newBuilder(com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder(other);
  }
  
  /** Creates a new FreshnessStats RecordBuilder by copying an existing FreshnessStats instance */
  public static com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder newBuilder(com.linkedin.pegasus2avro.metadata.query.FreshnessStats other) {
    return new com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder(other);
  }
  
  /**
   * RecordBuilder for FreshnessStats instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FreshnessStats>
    implements org.apache.avro.data.RecordBuilder<FreshnessStats> {

    private java.lang.Boolean cached;
    private java.util.Map<java.lang.String,java.lang.Long> systemFreshness;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.query.FreshnessStats.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cached)) {
        this.cached = data().deepCopy(fields()[0].schema(), other.cached);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.systemFreshness)) {
        this.systemFreshness = data().deepCopy(fields()[1].schema(), other.systemFreshness);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FreshnessStats instance */
    private Builder(com.linkedin.pegasus2avro.metadata.query.FreshnessStats other) {
            super(com.linkedin.pegasus2avro.metadata.query.FreshnessStats.SCHEMA$);
      if (isValidValue(fields()[0], other.cached)) {
        this.cached = data().deepCopy(fields()[0].schema(), other.cached);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.systemFreshness)) {
        this.systemFreshness = data().deepCopy(fields()[1].schema(), other.systemFreshness);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'cached' field */
    public java.lang.Boolean getCached() {
      return cached;
    }
    
    /** Sets the value of the 'cached' field */
    public com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder setCached(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.cached = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'cached' field has been set */
    public boolean hasCached() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'cached' field */
    public com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder clearCached() {
      cached = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'systemFreshness' field */
    public java.util.Map<java.lang.String,java.lang.Long> getSystemFreshness() {
      return systemFreshness;
    }
    
    /** Sets the value of the 'systemFreshness' field */
    public com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder setSystemFreshness(java.util.Map<java.lang.String,java.lang.Long> value) {
      validate(fields()[1], value);
      this.systemFreshness = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'systemFreshness' field has been set */
    public boolean hasSystemFreshness() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'systemFreshness' field */
    public com.linkedin.pegasus2avro.metadata.query.FreshnessStats.Builder clearSystemFreshness() {
      systemFreshness = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public FreshnessStats build() {
      try {
        FreshnessStats record = new FreshnessStats();
        record.cached = fieldSetFlags()[0] ? this.cached : (java.lang.Boolean) defaultValue(fields()[0]);
        record.systemFreshness = fieldSetFlags()[1] ? this.systemFreshness : (java.util.Map<java.lang.String,java.lang.Long>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
