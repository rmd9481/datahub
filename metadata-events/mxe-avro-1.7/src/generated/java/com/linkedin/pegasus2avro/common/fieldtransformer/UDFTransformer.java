/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.common.fieldtransformer;  
@SuppressWarnings("all")
/** Field transformation expressed in UDF */
@org.apache.avro.specific.AvroGenerated
public class UDFTransformer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UDFTransformer\",\"namespace\":\"com.linkedin.pegasus2avro.common.fieldtransformer\",\"doc\":\"Field transformation expressed in UDF\",\"fields\":[{\"name\":\"udf\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A UDF mentioning how the source fields got transformed to destination field. This is the FQCN(Fully Qualified Class Name) of the udf.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A UDF mentioning how the source fields got transformed to destination field. This is the FQCN(Fully Qualified Class Name) of the udf. */
  @Deprecated public java.lang.String udf;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UDFTransformer() {}

  /**
   * All-args constructor.
   */
  public UDFTransformer(java.lang.String udf) {
    this.udf = udf;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return udf;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: udf = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'udf' field.
   * A UDF mentioning how the source fields got transformed to destination field. This is the FQCN(Fully Qualified Class Name) of the udf.   */
  public java.lang.String getUdf() {
    return udf;
  }

  /**
   * Sets the value of the 'udf' field.
   * A UDF mentioning how the source fields got transformed to destination field. This is the FQCN(Fully Qualified Class Name) of the udf.   * @param value the value to set.
   */
  public void setUdf(java.lang.String value) {
    this.udf = value;
  }

  /** Creates a new UDFTransformer RecordBuilder */
  public static com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.Builder();
  }
  
  /** Creates a new UDFTransformer RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.Builder newBuilder(com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.Builder other) {
    return new com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.Builder(other);
  }
  
  /** Creates a new UDFTransformer RecordBuilder by copying an existing UDFTransformer instance */
  public static com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.Builder newBuilder(com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer other) {
    return new com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.Builder(other);
  }
  
  /**
   * RecordBuilder for UDFTransformer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UDFTransformer>
    implements org.apache.avro.data.RecordBuilder<UDFTransformer> {

    private java.lang.String udf;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.udf)) {
        this.udf = data().deepCopy(fields()[0].schema(), other.udf);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing UDFTransformer instance */
    private Builder(com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer other) {
            super(com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.SCHEMA$);
      if (isValidValue(fields()[0], other.udf)) {
        this.udf = data().deepCopy(fields()[0].schema(), other.udf);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'udf' field */
    public java.lang.String getUdf() {
      return udf;
    }
    
    /** Sets the value of the 'udf' field */
    public com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.Builder setUdf(java.lang.String value) {
      validate(fields()[0], value);
      this.udf = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'udf' field has been set */
    public boolean hasUdf() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'udf' field */
    public com.linkedin.pegasus2avro.common.fieldtransformer.UDFTransformer.Builder clearUdf() {
      udf = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public UDFTransformer build() {
      try {
        UDFTransformer record = new UDFTransformer();
        record.udf = fieldSetFlags()[0] ? this.udf : (java.lang.String) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
