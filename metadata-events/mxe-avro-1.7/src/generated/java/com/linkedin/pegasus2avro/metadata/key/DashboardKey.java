/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.key;  
@SuppressWarnings("all")
/** Key for a Dashboard */
@org.apache.avro.specific.AvroGenerated
public class DashboardKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DashboardKey\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.key\",\"doc\":\"Key for a Dashboard\",\"fields\":[{\"name\":\"dashboardTool\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the dashboard tool such as looker, redash etc.\",\"Searchable\":{\"boostScore\":4.0,\"fieldName\":\"tool\",\"fieldType\":\"TEXT_PARTIAL\"}},{\"name\":\"dashboardId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique id for the dashboard. This id should be globally unique for a dashboarding tool even when there are multiple deployments of it. As an example, dashboard URL could be used here for Looker such as 'looker.linkedin.com/dashboards/1234'\"}],\"Aspect\":{\"name\":\"dashboardKey\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The name of the dashboard tool such as looker, redash etc. */
  @Deprecated public java.lang.String dashboardTool;
  /** Unique id for the dashboard. This id should be globally unique for a dashboarding tool even when there are multiple deployments of it. As an example, dashboard URL could be used here for Looker such as 'looker.linkedin.com/dashboards/1234' */
  @Deprecated public java.lang.String dashboardId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DashboardKey() {}

  /**
   * All-args constructor.
   */
  public DashboardKey(java.lang.String dashboardTool, java.lang.String dashboardId) {
    this.dashboardTool = dashboardTool;
    this.dashboardId = dashboardId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dashboardTool;
    case 1: return dashboardId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dashboardTool = (java.lang.String)value$; break;
    case 1: dashboardId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dashboardTool' field.
   * The name of the dashboard tool such as looker, redash etc.   */
  public java.lang.String getDashboardTool() {
    return dashboardTool;
  }

  /**
   * Sets the value of the 'dashboardTool' field.
   * The name of the dashboard tool such as looker, redash etc.   * @param value the value to set.
   */
  public void setDashboardTool(java.lang.String value) {
    this.dashboardTool = value;
  }

  /**
   * Gets the value of the 'dashboardId' field.
   * Unique id for the dashboard. This id should be globally unique for a dashboarding tool even when there are multiple deployments of it. As an example, dashboard URL could be used here for Looker such as 'looker.linkedin.com/dashboards/1234'   */
  public java.lang.String getDashboardId() {
    return dashboardId;
  }

  /**
   * Sets the value of the 'dashboardId' field.
   * Unique id for the dashboard. This id should be globally unique for a dashboarding tool even when there are multiple deployments of it. As an example, dashboard URL could be used here for Looker such as 'looker.linkedin.com/dashboards/1234'   * @param value the value to set.
   */
  public void setDashboardId(java.lang.String value) {
    this.dashboardId = value;
  }

  /** Creates a new DashboardKey RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder();
  }
  
  /** Creates a new DashboardKey RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder newBuilder(com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder(other);
  }
  
  /** Creates a new DashboardKey RecordBuilder by copying an existing DashboardKey instance */
  public static com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder newBuilder(com.linkedin.pegasus2avro.metadata.key.DashboardKey other) {
    return new com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder(other);
  }
  
  /**
   * RecordBuilder for DashboardKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DashboardKey>
    implements org.apache.avro.data.RecordBuilder<DashboardKey> {

    private java.lang.String dashboardTool;
    private java.lang.String dashboardId;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.key.DashboardKey.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dashboardTool)) {
        this.dashboardTool = data().deepCopy(fields()[0].schema(), other.dashboardTool);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dashboardId)) {
        this.dashboardId = data().deepCopy(fields()[1].schema(), other.dashboardId);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DashboardKey instance */
    private Builder(com.linkedin.pegasus2avro.metadata.key.DashboardKey other) {
            super(com.linkedin.pegasus2avro.metadata.key.DashboardKey.SCHEMA$);
      if (isValidValue(fields()[0], other.dashboardTool)) {
        this.dashboardTool = data().deepCopy(fields()[0].schema(), other.dashboardTool);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dashboardId)) {
        this.dashboardId = data().deepCopy(fields()[1].schema(), other.dashboardId);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'dashboardTool' field */
    public java.lang.String getDashboardTool() {
      return dashboardTool;
    }
    
    /** Sets the value of the 'dashboardTool' field */
    public com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder setDashboardTool(java.lang.String value) {
      validate(fields()[0], value);
      this.dashboardTool = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'dashboardTool' field has been set */
    public boolean hasDashboardTool() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'dashboardTool' field */
    public com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder clearDashboardTool() {
      dashboardTool = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'dashboardId' field */
    public java.lang.String getDashboardId() {
      return dashboardId;
    }
    
    /** Sets the value of the 'dashboardId' field */
    public com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder setDashboardId(java.lang.String value) {
      validate(fields()[1], value);
      this.dashboardId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'dashboardId' field has been set */
    public boolean hasDashboardId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'dashboardId' field */
    public com.linkedin.pegasus2avro.metadata.key.DashboardKey.Builder clearDashboardId() {
      dashboardId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public DashboardKey build() {
      try {
        DashboardKey record = new DashboardKey();
        record.dashboardTool = fieldSetFlags()[0] ? this.dashboardTool : (java.lang.String) defaultValue(fields()[0]);
        record.dashboardId = fieldSetFlags()[1] ? this.dashboardId : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
