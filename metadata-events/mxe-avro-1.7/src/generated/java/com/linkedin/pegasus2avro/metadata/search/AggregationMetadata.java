/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.search;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AggregationMetadata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AggregationMetadata\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.search\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the aggregation, e.g, platform, origin\"},{\"name\":\"displayName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Name of the filter to be displayed in the UI\",\"default\":null},{\"name\":\"aggregations\",\"type\":{\"type\":\"map\",\"values\":\"long\",\"avro.java.string\":\"String\"},\"doc\":\"List of aggregations showing the number of documents falling into each bucket. e.g, for platform aggregation, the bucket can be hive, kafka, etc\"},{\"name\":\"filterValues\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FilterValue\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"entity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"facetCount\",\"type\":\"long\"},{\"name\":\"filtered\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The name of the aggregation, e.g, platform, origin */
  @Deprecated public java.lang.String name;
  /** Name of the filter to be displayed in the UI */
  @Deprecated public java.lang.String displayName;
  /** List of aggregations showing the number of documents falling into each bucket. e.g, for platform aggregation, the bucket can be hive, kafka, etc */
  @Deprecated public java.util.Map<java.lang.String,java.lang.Long> aggregations;
  @Deprecated public java.util.List<com.linkedin.pegasus2avro.metadata.search.FilterValue> filterValues;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AggregationMetadata() {}

  /**
   * All-args constructor.
   */
  public AggregationMetadata(java.lang.String name, java.lang.String displayName, java.util.Map<java.lang.String,java.lang.Long> aggregations, java.util.List<com.linkedin.pegasus2avro.metadata.search.FilterValue> filterValues) {
    this.name = name;
    this.displayName = displayName;
    this.aggregations = aggregations;
    this.filterValues = filterValues;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return displayName;
    case 2: return aggregations;
    case 3: return filterValues;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: displayName = (java.lang.String)value$; break;
    case 2: aggregations = (java.util.Map<java.lang.String,java.lang.Long>)value$; break;
    case 3: filterValues = (java.util.List<com.linkedin.pegasus2avro.metadata.search.FilterValue>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * The name of the aggregation, e.g, platform, origin   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * The name of the aggregation, e.g, platform, origin   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'displayName' field.
   * Name of the filter to be displayed in the UI   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Sets the value of the 'displayName' field.
   * Name of the filter to be displayed in the UI   * @param value the value to set.
   */
  public void setDisplayName(java.lang.String value) {
    this.displayName = value;
  }

  /**
   * Gets the value of the 'aggregations' field.
   * List of aggregations showing the number of documents falling into each bucket. e.g, for platform aggregation, the bucket can be hive, kafka, etc   */
  public java.util.Map<java.lang.String,java.lang.Long> getAggregations() {
    return aggregations;
  }

  /**
   * Sets the value of the 'aggregations' field.
   * List of aggregations showing the number of documents falling into each bucket. e.g, for platform aggregation, the bucket can be hive, kafka, etc   * @param value the value to set.
   */
  public void setAggregations(java.util.Map<java.lang.String,java.lang.Long> value) {
    this.aggregations = value;
  }

  /**
   * Gets the value of the 'filterValues' field.
   */
  public java.util.List<com.linkedin.pegasus2avro.metadata.search.FilterValue> getFilterValues() {
    return filterValues;
  }

  /**
   * Sets the value of the 'filterValues' field.
   * @param value the value to set.
   */
  public void setFilterValues(java.util.List<com.linkedin.pegasus2avro.metadata.search.FilterValue> value) {
    this.filterValues = value;
  }

  /** Creates a new AggregationMetadata RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder();
  }
  
  /** Creates a new AggregationMetadata RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder newBuilder(com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder(other);
  }
  
  /** Creates a new AggregationMetadata RecordBuilder by copying an existing AggregationMetadata instance */
  public static com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder newBuilder(com.linkedin.pegasus2avro.metadata.search.AggregationMetadata other) {
    return new com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder(other);
  }
  
  /**
   * RecordBuilder for AggregationMetadata instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AggregationMetadata>
    implements org.apache.avro.data.RecordBuilder<AggregationMetadata> {

    private java.lang.String name;
    private java.lang.String displayName;
    private java.util.Map<java.lang.String,java.lang.Long> aggregations;
    private java.util.List<com.linkedin.pegasus2avro.metadata.search.FilterValue> filterValues;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.displayName)) {
        this.displayName = data().deepCopy(fields()[1].schema(), other.displayName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aggregations)) {
        this.aggregations = data().deepCopy(fields()[2].schema(), other.aggregations);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.filterValues)) {
        this.filterValues = data().deepCopy(fields()[3].schema(), other.filterValues);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AggregationMetadata instance */
    private Builder(com.linkedin.pegasus2avro.metadata.search.AggregationMetadata other) {
            super(com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.displayName)) {
        this.displayName = data().deepCopy(fields()[1].schema(), other.displayName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aggregations)) {
        this.aggregations = data().deepCopy(fields()[2].schema(), other.aggregations);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.filterValues)) {
        this.filterValues = data().deepCopy(fields()[3].schema(), other.filterValues);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'displayName' field */
    public java.lang.String getDisplayName() {
      return displayName;
    }
    
    /** Sets the value of the 'displayName' field */
    public com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder setDisplayName(java.lang.String value) {
      validate(fields()[1], value);
      this.displayName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'displayName' field has been set */
    public boolean hasDisplayName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'displayName' field */
    public com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder clearDisplayName() {
      displayName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'aggregations' field */
    public java.util.Map<java.lang.String,java.lang.Long> getAggregations() {
      return aggregations;
    }
    
    /** Sets the value of the 'aggregations' field */
    public com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder setAggregations(java.util.Map<java.lang.String,java.lang.Long> value) {
      validate(fields()[2], value);
      this.aggregations = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'aggregations' field has been set */
    public boolean hasAggregations() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'aggregations' field */
    public com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder clearAggregations() {
      aggregations = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'filterValues' field */
    public java.util.List<com.linkedin.pegasus2avro.metadata.search.FilterValue> getFilterValues() {
      return filterValues;
    }
    
    /** Sets the value of the 'filterValues' field */
    public com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder setFilterValues(java.util.List<com.linkedin.pegasus2avro.metadata.search.FilterValue> value) {
      validate(fields()[3], value);
      this.filterValues = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'filterValues' field has been set */
    public boolean hasFilterValues() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'filterValues' field */
    public com.linkedin.pegasus2avro.metadata.search.AggregationMetadata.Builder clearFilterValues() {
      filterValues = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AggregationMetadata build() {
      try {
        AggregationMetadata record = new AggregationMetadata();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.displayName = fieldSetFlags()[1] ? this.displayName : (java.lang.String) defaultValue(fields()[1]);
        record.aggregations = fieldSetFlags()[2] ? this.aggregations : (java.util.Map<java.lang.String,java.lang.Long>) defaultValue(fields()[2]);
        record.filterValues = fieldSetFlags()[3] ? this.filterValues : (java.util.List<com.linkedin.pegasus2avro.metadata.search.FilterValue>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
