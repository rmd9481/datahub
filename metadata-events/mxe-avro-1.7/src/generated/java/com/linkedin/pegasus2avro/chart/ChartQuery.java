/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.chart;  
@SuppressWarnings("all")
/** Information for chart query which is used for getting data of the chart */
@org.apache.avro.specific.AvroGenerated
public class ChartQuery extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChartQuery\",\"namespace\":\"com.linkedin.pegasus2avro.chart\",\"doc\":\"Information for chart query which is used for getting data of the chart\",\"fields\":[{\"name\":\"rawQuery\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Raw query to build a chart from input datasets\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ChartQueryType\",\"symbols\":[\"LOOKML\",\"SQL\"],\"symbolDocs\":{\"LOOKML\":\"LookML queries\",\"SQL\":\"SQL type queries\"}},\"doc\":\"Chart query type\",\"Searchable\":{\"addToFilters\":true,\"fieldName\":\"queryType\",\"fieldType\":\"KEYWORD\",\"filterNameOverride\":\"Query Type\"}}],\"Aspect\":{\"name\":\"chartQuery\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Raw query to build a chart from input datasets */
  @Deprecated public java.lang.String rawQuery;
  /** Chart query type */
  @Deprecated public com.linkedin.pegasus2avro.chart.ChartQueryType type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ChartQuery() {}

  /**
   * All-args constructor.
   */
  public ChartQuery(java.lang.String rawQuery, com.linkedin.pegasus2avro.chart.ChartQueryType type) {
    this.rawQuery = rawQuery;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return rawQuery;
    case 1: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: rawQuery = (java.lang.String)value$; break;
    case 1: type = (com.linkedin.pegasus2avro.chart.ChartQueryType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'rawQuery' field.
   * Raw query to build a chart from input datasets   */
  public java.lang.String getRawQuery() {
    return rawQuery;
  }

  /**
   * Sets the value of the 'rawQuery' field.
   * Raw query to build a chart from input datasets   * @param value the value to set.
   */
  public void setRawQuery(java.lang.String value) {
    this.rawQuery = value;
  }

  /**
   * Gets the value of the 'type' field.
   * Chart query type   */
  public com.linkedin.pegasus2avro.chart.ChartQueryType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Chart query type   * @param value the value to set.
   */
  public void setType(com.linkedin.pegasus2avro.chart.ChartQueryType value) {
    this.type = value;
  }

  /** Creates a new ChartQuery RecordBuilder */
  public static com.linkedin.pegasus2avro.chart.ChartQuery.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.chart.ChartQuery.Builder();
  }
  
  /** Creates a new ChartQuery RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.chart.ChartQuery.Builder newBuilder(com.linkedin.pegasus2avro.chart.ChartQuery.Builder other) {
    return new com.linkedin.pegasus2avro.chart.ChartQuery.Builder(other);
  }
  
  /** Creates a new ChartQuery RecordBuilder by copying an existing ChartQuery instance */
  public static com.linkedin.pegasus2avro.chart.ChartQuery.Builder newBuilder(com.linkedin.pegasus2avro.chart.ChartQuery other) {
    return new com.linkedin.pegasus2avro.chart.ChartQuery.Builder(other);
  }
  
  /**
   * RecordBuilder for ChartQuery instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChartQuery>
    implements org.apache.avro.data.RecordBuilder<ChartQuery> {

    private java.lang.String rawQuery;
    private com.linkedin.pegasus2avro.chart.ChartQueryType type;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.chart.ChartQuery.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.chart.ChartQuery.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.rawQuery)) {
        this.rawQuery = data().deepCopy(fields()[0].schema(), other.rawQuery);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ChartQuery instance */
    private Builder(com.linkedin.pegasus2avro.chart.ChartQuery other) {
            super(com.linkedin.pegasus2avro.chart.ChartQuery.SCHEMA$);
      if (isValidValue(fields()[0], other.rawQuery)) {
        this.rawQuery = data().deepCopy(fields()[0].schema(), other.rawQuery);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'rawQuery' field */
    public java.lang.String getRawQuery() {
      return rawQuery;
    }
    
    /** Sets the value of the 'rawQuery' field */
    public com.linkedin.pegasus2avro.chart.ChartQuery.Builder setRawQuery(java.lang.String value) {
      validate(fields()[0], value);
      this.rawQuery = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'rawQuery' field has been set */
    public boolean hasRawQuery() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'rawQuery' field */
    public com.linkedin.pegasus2avro.chart.ChartQuery.Builder clearRawQuery() {
      rawQuery = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public com.linkedin.pegasus2avro.chart.ChartQueryType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.linkedin.pegasus2avro.chart.ChartQuery.Builder setType(com.linkedin.pegasus2avro.chart.ChartQueryType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'type' field */
    public com.linkedin.pegasus2avro.chart.ChartQuery.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public ChartQuery build() {
      try {
        ChartQuery record = new ChartQuery();
        record.rawQuery = fieldSetFlags()[0] ? this.rawQuery : (java.lang.String) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (com.linkedin.pegasus2avro.chart.ChartQueryType) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
