/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.query.filter;  
@SuppressWarnings("all")
/** Sort order along with the field to sort it on, to be applied to the results. */
@org.apache.avro.specific.AvroGenerated
public class SortCriterion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SortCriterion\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.query.filter\",\"doc\":\"Sort order along with the field to sort it on, to be applied to the results.\",\"fields\":[{\"name\":\"field\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the field that sorting has to be applied to\"},{\"name\":\"order\",\"type\":{\"type\":\"enum\",\"name\":\"SortOrder\",\"doc\":\"The order used to sort the results\",\"symbols\":[\"ASCENDING\",\"DESCENDING\"],\"symbolDocs\":{\"ASCENDING\":\"If results need to be sorted in ascending order\",\"DESCENDING\":\"If results need to be sorted in descending order\"}},\"doc\":\"The order to sort the results i.e. ASCENDING or DESCENDING\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The name of the field that sorting has to be applied to */
  @Deprecated public java.lang.String field;
  /** The order to sort the results i.e. ASCENDING or DESCENDING */
  @Deprecated public com.linkedin.pegasus2avro.metadata.query.filter.SortOrder order;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SortCriterion() {}

  /**
   * All-args constructor.
   */
  public SortCriterion(java.lang.String field, com.linkedin.pegasus2avro.metadata.query.filter.SortOrder order) {
    this.field = field;
    this.order = order;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return field;
    case 1: return order;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: field = (java.lang.String)value$; break;
    case 1: order = (com.linkedin.pegasus2avro.metadata.query.filter.SortOrder)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'field' field.
   * The name of the field that sorting has to be applied to   */
  public java.lang.String getField() {
    return field;
  }

  /**
   * Sets the value of the 'field' field.
   * The name of the field that sorting has to be applied to   * @param value the value to set.
   */
  public void setField(java.lang.String value) {
    this.field = value;
  }

  /**
   * Gets the value of the 'order' field.
   * The order to sort the results i.e. ASCENDING or DESCENDING   */
  public com.linkedin.pegasus2avro.metadata.query.filter.SortOrder getOrder() {
    return order;
  }

  /**
   * Sets the value of the 'order' field.
   * The order to sort the results i.e. ASCENDING or DESCENDING   * @param value the value to set.
   */
  public void setOrder(com.linkedin.pegasus2avro.metadata.query.filter.SortOrder value) {
    this.order = value;
  }

  /** Creates a new SortCriterion RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder();
  }
  
  /** Creates a new SortCriterion RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder newBuilder(com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder(other);
  }
  
  /** Creates a new SortCriterion RecordBuilder by copying an existing SortCriterion instance */
  public static com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder newBuilder(com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion other) {
    return new com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder(other);
  }
  
  /**
   * RecordBuilder for SortCriterion instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SortCriterion>
    implements org.apache.avro.data.RecordBuilder<SortCriterion> {

    private java.lang.String field;
    private com.linkedin.pegasus2avro.metadata.query.filter.SortOrder order;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.field)) {
        this.field = data().deepCopy(fields()[0].schema(), other.field);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.order)) {
        this.order = data().deepCopy(fields()[1].schema(), other.order);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SortCriterion instance */
    private Builder(com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion other) {
            super(com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.SCHEMA$);
      if (isValidValue(fields()[0], other.field)) {
        this.field = data().deepCopy(fields()[0].schema(), other.field);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.order)) {
        this.order = data().deepCopy(fields()[1].schema(), other.order);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'field' field */
    public java.lang.String getField() {
      return field;
    }
    
    /** Sets the value of the 'field' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder setField(java.lang.String value) {
      validate(fields()[0], value);
      this.field = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'field' field has been set */
    public boolean hasField() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'field' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder clearField() {
      field = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'order' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.SortOrder getOrder() {
      return order;
    }
    
    /** Sets the value of the 'order' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder setOrder(com.linkedin.pegasus2avro.metadata.query.filter.SortOrder value) {
      validate(fields()[1], value);
      this.order = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'order' field has been set */
    public boolean hasOrder() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'order' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.SortCriterion.Builder clearOrder() {
      order = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SortCriterion build() {
      try {
        SortCriterion record = new SortCriterion();
        record.field = fieldSetFlags()[0] ? this.field : (java.lang.String) defaultValue(fields()[0]);
        record.order = fieldSetFlags()[1] ? this.order : (com.linkedin.pegasus2avro.metadata.query.filter.SortOrder) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
