/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.common;  
@SuppressWarnings("all")
/** Related business terms information */
@org.apache.avro.specific.AvroGenerated
public class GlossaryTerms extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GlossaryTerms\",\"namespace\":\"com.linkedin.pegasus2avro.common\",\"doc\":\"Related business terms information\",\"fields\":[{\"name\":\"terms\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GlossaryTermAssociation\",\"doc\":\"Properties of an applied glossary term.\",\"fields\":[{\"name\":\"urn\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Urn of the applied glossary term\",\"Relationship\":{\"entityTypes\":[\"glossaryTerm\"],\"name\":\"TermedWith\"},\"Searchable\":{\"addToFilters\":true,\"fieldName\":\"glossaryTerms\",\"fieldType\":\"URN\",\"filterNameOverride\":\"Glossary Term\",\"hasValuesFieldName\":\"hasGlossaryTerms\"},\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.GlossaryTermUrn\"}},{\"name\":\"context\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Additional context about the association\",\"default\":null}]}},\"doc\":\"The related business terms\"},{\"name\":\"auditStamp\",\"type\":{\"type\":\"record\",\"name\":\"AuditStamp\",\"doc\":\"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.\",\"fields\":[{\"name\":\"time\",\"type\":\"long\",\"doc\":\"When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent.\"},{\"name\":\"actor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change.\",\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"impersonator\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.\",\"default\":null,\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually.\",\"default\":null}]},\"doc\":\"Audit stamp containing who reported the related business term\"}],\"Aspect\":{\"name\":\"glossaryTerms\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The related business terms */
  @Deprecated public java.util.List<com.linkedin.pegasus2avro.common.GlossaryTermAssociation> terms;
  /** Audit stamp containing who reported the related business term */
  @Deprecated public com.linkedin.pegasus2avro.common.AuditStamp auditStamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GlossaryTerms() {}

  /**
   * All-args constructor.
   */
  public GlossaryTerms(java.util.List<com.linkedin.pegasus2avro.common.GlossaryTermAssociation> terms, com.linkedin.pegasus2avro.common.AuditStamp auditStamp) {
    this.terms = terms;
    this.auditStamp = auditStamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return terms;
    case 1: return auditStamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: terms = (java.util.List<com.linkedin.pegasus2avro.common.GlossaryTermAssociation>)value$; break;
    case 1: auditStamp = (com.linkedin.pegasus2avro.common.AuditStamp)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'terms' field.
   * The related business terms   */
  public java.util.List<com.linkedin.pegasus2avro.common.GlossaryTermAssociation> getTerms() {
    return terms;
  }

  /**
   * Sets the value of the 'terms' field.
   * The related business terms   * @param value the value to set.
   */
  public void setTerms(java.util.List<com.linkedin.pegasus2avro.common.GlossaryTermAssociation> value) {
    this.terms = value;
  }

  /**
   * Gets the value of the 'auditStamp' field.
   * Audit stamp containing who reported the related business term   */
  public com.linkedin.pegasus2avro.common.AuditStamp getAuditStamp() {
    return auditStamp;
  }

  /**
   * Sets the value of the 'auditStamp' field.
   * Audit stamp containing who reported the related business term   * @param value the value to set.
   */
  public void setAuditStamp(com.linkedin.pegasus2avro.common.AuditStamp value) {
    this.auditStamp = value;
  }

  /** Creates a new GlossaryTerms RecordBuilder */
  public static com.linkedin.pegasus2avro.common.GlossaryTerms.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.common.GlossaryTerms.Builder();
  }
  
  /** Creates a new GlossaryTerms RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.common.GlossaryTerms.Builder newBuilder(com.linkedin.pegasus2avro.common.GlossaryTerms.Builder other) {
    return new com.linkedin.pegasus2avro.common.GlossaryTerms.Builder(other);
  }
  
  /** Creates a new GlossaryTerms RecordBuilder by copying an existing GlossaryTerms instance */
  public static com.linkedin.pegasus2avro.common.GlossaryTerms.Builder newBuilder(com.linkedin.pegasus2avro.common.GlossaryTerms other) {
    return new com.linkedin.pegasus2avro.common.GlossaryTerms.Builder(other);
  }
  
  /**
   * RecordBuilder for GlossaryTerms instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GlossaryTerms>
    implements org.apache.avro.data.RecordBuilder<GlossaryTerms> {

    private java.util.List<com.linkedin.pegasus2avro.common.GlossaryTermAssociation> terms;
    private com.linkedin.pegasus2avro.common.AuditStamp auditStamp;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.common.GlossaryTerms.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.common.GlossaryTerms.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.terms)) {
        this.terms = data().deepCopy(fields()[0].schema(), other.terms);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.auditStamp)) {
        this.auditStamp = data().deepCopy(fields()[1].schema(), other.auditStamp);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GlossaryTerms instance */
    private Builder(com.linkedin.pegasus2avro.common.GlossaryTerms other) {
            super(com.linkedin.pegasus2avro.common.GlossaryTerms.SCHEMA$);
      if (isValidValue(fields()[0], other.terms)) {
        this.terms = data().deepCopy(fields()[0].schema(), other.terms);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.auditStamp)) {
        this.auditStamp = data().deepCopy(fields()[1].schema(), other.auditStamp);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'terms' field */
    public java.util.List<com.linkedin.pegasus2avro.common.GlossaryTermAssociation> getTerms() {
      return terms;
    }
    
    /** Sets the value of the 'terms' field */
    public com.linkedin.pegasus2avro.common.GlossaryTerms.Builder setTerms(java.util.List<com.linkedin.pegasus2avro.common.GlossaryTermAssociation> value) {
      validate(fields()[0], value);
      this.terms = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'terms' field has been set */
    public boolean hasTerms() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'terms' field */
    public com.linkedin.pegasus2avro.common.GlossaryTerms.Builder clearTerms() {
      terms = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'auditStamp' field */
    public com.linkedin.pegasus2avro.common.AuditStamp getAuditStamp() {
      return auditStamp;
    }
    
    /** Sets the value of the 'auditStamp' field */
    public com.linkedin.pegasus2avro.common.GlossaryTerms.Builder setAuditStamp(com.linkedin.pegasus2avro.common.AuditStamp value) {
      validate(fields()[1], value);
      this.auditStamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'auditStamp' field has been set */
    public boolean hasAuditStamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'auditStamp' field */
    public com.linkedin.pegasus2avro.common.GlossaryTerms.Builder clearAuditStamp() {
      auditStamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public GlossaryTerms build() {
      try {
        GlossaryTerms record = new GlossaryTerms();
        record.terms = fieldSetFlags()[0] ? this.terms : (java.util.List<com.linkedin.pegasus2avro.common.GlossaryTermAssociation>) defaultValue(fields()[0]);
        record.auditStamp = fieldSetFlags()[1] ? this.auditStamp : (com.linkedin.pegasus2avro.common.AuditStamp) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
