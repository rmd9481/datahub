/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.glossary;  
@SuppressWarnings("all")
/** Properties associated with a GlossaryTerm */
@org.apache.avro.specific.AvroGenerated
public class GlossaryTermInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GlossaryTermInfo\",\"namespace\":\"com.linkedin.pegasus2avro.glossary\",\"doc\":\"Properties associated with a GlossaryTerm\",\"fields\":[{\"name\":\"customProperties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Custom property bag.\",\"default\":{},\"Searchable\":{\"/*\":{\"queryByDefault\":true}}},{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Optional id for the term\",\"default\":null,\"Searchable\":{\"fieldType\":\"TEXT_PARTIAL\"}},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Display name of the term\",\"default\":null,\"Searchable\":{\"boostScore\":10.0,\"enableAutocomplete\":true,\"fieldNameAliases\":[\"_entityName\"],\"fieldType\":\"WORD_GRAM\"}},{\"name\":\"definition\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Definition of business term.\",\"Searchable\":{}},{\"name\":\"parentNode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Parent node of the glossary term\",\"default\":null,\"Relationship\":{\"entityTypes\":[\"glossaryNode\"],\"name\":\"IsPartOf\"},\"Searchable\":{\"fieldName\":\"parentNode\",\"fieldType\":\"URN\",\"hasValuesFieldName\":\"hasParentNode\"},\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.GlossaryNodeUrn\"}},{\"name\":\"termSource\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Source of the Business Term (INTERNAL or EXTERNAL) with default value as INTERNAL\",\"Searchable\":{\"fieldType\":\"KEYWORD\"}},{\"name\":\"sourceRef\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"External Reference to the business-term\",\"default\":null,\"Searchable\":{\"fieldType\":\"KEYWORD\"}},{\"name\":\"sourceUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The abstracted URL such as https://spec.edmcouncil.org/fibo/ontology/FBC/FinancialInstruments/FinancialInstruments/CashInstrument.\",\"default\":null,\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.url.Url\",\"coercerClass\":\"com.linkedin.pegasus2avro.common.url.UrlCoercer\"}},{\"name\":\"rawSchema\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Schema definition of the glossary term\",\"default\":null,\"deprecated\":true}],\"Aspect\":{\"name\":\"glossaryTermInfo\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Custom property bag. */
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> customProperties;
  /** Optional id for the term */
  @Deprecated public java.lang.String id;
  /** Display name of the term */
  @Deprecated public java.lang.String name;
  /** Definition of business term. */
  @Deprecated public java.lang.String definition;
  /** Parent node of the glossary term */
  @Deprecated public java.lang.String parentNode;
  /** Source of the Business Term (INTERNAL or EXTERNAL) with default value as INTERNAL */
  @Deprecated public java.lang.String termSource;
  /** External Reference to the business-term */
  @Deprecated public java.lang.String sourceRef;
  /** The abstracted URL such as https://spec.edmcouncil.org/fibo/ontology/FBC/FinancialInstruments/FinancialInstruments/CashInstrument. */
  @Deprecated public java.lang.String sourceUrl;
  /** Schema definition of the glossary term */
  @Deprecated public java.lang.String rawSchema;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GlossaryTermInfo() {}

  /**
   * All-args constructor.
   */
  public GlossaryTermInfo(java.util.Map<java.lang.String,java.lang.String> customProperties, java.lang.String id, java.lang.String name, java.lang.String definition, java.lang.String parentNode, java.lang.String termSource, java.lang.String sourceRef, java.lang.String sourceUrl, java.lang.String rawSchema) {
    this.customProperties = customProperties;
    this.id = id;
    this.name = name;
    this.definition = definition;
    this.parentNode = parentNode;
    this.termSource = termSource;
    this.sourceRef = sourceRef;
    this.sourceUrl = sourceUrl;
    this.rawSchema = rawSchema;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customProperties;
    case 1: return id;
    case 2: return name;
    case 3: return definition;
    case 4: return parentNode;
    case 5: return termSource;
    case 6: return sourceRef;
    case 7: return sourceUrl;
    case 8: return rawSchema;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customProperties = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 1: id = (java.lang.String)value$; break;
    case 2: name = (java.lang.String)value$; break;
    case 3: definition = (java.lang.String)value$; break;
    case 4: parentNode = (java.lang.String)value$; break;
    case 5: termSource = (java.lang.String)value$; break;
    case 6: sourceRef = (java.lang.String)value$; break;
    case 7: sourceUrl = (java.lang.String)value$; break;
    case 8: rawSchema = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customProperties' field.
   * Custom property bag.   */
  public java.util.Map<java.lang.String,java.lang.String> getCustomProperties() {
    return customProperties;
  }

  /**
   * Sets the value of the 'customProperties' field.
   * Custom property bag.   * @param value the value to set.
   */
  public void setCustomProperties(java.util.Map<java.lang.String,java.lang.String> value) {
    this.customProperties = value;
  }

  /**
   * Gets the value of the 'id' field.
   * Optional id for the term   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Optional id for the term   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * Display name of the term   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Display name of the term   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'definition' field.
   * Definition of business term.   */
  public java.lang.String getDefinition() {
    return definition;
  }

  /**
   * Sets the value of the 'definition' field.
   * Definition of business term.   * @param value the value to set.
   */
  public void setDefinition(java.lang.String value) {
    this.definition = value;
  }

  /**
   * Gets the value of the 'parentNode' field.
   * Parent node of the glossary term   */
  public java.lang.String getParentNode() {
    return parentNode;
  }

  /**
   * Sets the value of the 'parentNode' field.
   * Parent node of the glossary term   * @param value the value to set.
   */
  public void setParentNode(java.lang.String value) {
    this.parentNode = value;
  }

  /**
   * Gets the value of the 'termSource' field.
   * Source of the Business Term (INTERNAL or EXTERNAL) with default value as INTERNAL   */
  public java.lang.String getTermSource() {
    return termSource;
  }

  /**
   * Sets the value of the 'termSource' field.
   * Source of the Business Term (INTERNAL or EXTERNAL) with default value as INTERNAL   * @param value the value to set.
   */
  public void setTermSource(java.lang.String value) {
    this.termSource = value;
  }

  /**
   * Gets the value of the 'sourceRef' field.
   * External Reference to the business-term   */
  public java.lang.String getSourceRef() {
    return sourceRef;
  }

  /**
   * Sets the value of the 'sourceRef' field.
   * External Reference to the business-term   * @param value the value to set.
   */
  public void setSourceRef(java.lang.String value) {
    this.sourceRef = value;
  }

  /**
   * Gets the value of the 'sourceUrl' field.
   * The abstracted URL such as https://spec.edmcouncil.org/fibo/ontology/FBC/FinancialInstruments/FinancialInstruments/CashInstrument.   */
  public java.lang.String getSourceUrl() {
    return sourceUrl;
  }

  /**
   * Sets the value of the 'sourceUrl' field.
   * The abstracted URL such as https://spec.edmcouncil.org/fibo/ontology/FBC/FinancialInstruments/FinancialInstruments/CashInstrument.   * @param value the value to set.
   */
  public void setSourceUrl(java.lang.String value) {
    this.sourceUrl = value;
  }

  /**
   * Gets the value of the 'rawSchema' field.
   * Schema definition of the glossary term   */
  public java.lang.String getRawSchema() {
    return rawSchema;
  }

  /**
   * Sets the value of the 'rawSchema' field.
   * Schema definition of the glossary term   * @param value the value to set.
   */
  public void setRawSchema(java.lang.String value) {
    this.rawSchema = value;
  }

  /** Creates a new GlossaryTermInfo RecordBuilder */
  public static com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder();
  }
  
  /** Creates a new GlossaryTermInfo RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder newBuilder(com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder other) {
    return new com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder(other);
  }
  
  /** Creates a new GlossaryTermInfo RecordBuilder by copying an existing GlossaryTermInfo instance */
  public static com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder newBuilder(com.linkedin.pegasus2avro.glossary.GlossaryTermInfo other) {
    return new com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for GlossaryTermInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GlossaryTermInfo>
    implements org.apache.avro.data.RecordBuilder<GlossaryTermInfo> {

    private java.util.Map<java.lang.String,java.lang.String> customProperties;
    private java.lang.String id;
    private java.lang.String name;
    private java.lang.String definition;
    private java.lang.String parentNode;
    private java.lang.String termSource;
    private java.lang.String sourceRef;
    private java.lang.String sourceUrl;
    private java.lang.String rawSchema;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customProperties)) {
        this.customProperties = data().deepCopy(fields()[0].schema(), other.customProperties);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.definition)) {
        this.definition = data().deepCopy(fields()[3].schema(), other.definition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.parentNode)) {
        this.parentNode = data().deepCopy(fields()[4].schema(), other.parentNode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.termSource)) {
        this.termSource = data().deepCopy(fields()[5].schema(), other.termSource);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sourceRef)) {
        this.sourceRef = data().deepCopy(fields()[6].schema(), other.sourceRef);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sourceUrl)) {
        this.sourceUrl = data().deepCopy(fields()[7].schema(), other.sourceUrl);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.rawSchema)) {
        this.rawSchema = data().deepCopy(fields()[8].schema(), other.rawSchema);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GlossaryTermInfo instance */
    private Builder(com.linkedin.pegasus2avro.glossary.GlossaryTermInfo other) {
            super(com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.customProperties)) {
        this.customProperties = data().deepCopy(fields()[0].schema(), other.customProperties);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.definition)) {
        this.definition = data().deepCopy(fields()[3].schema(), other.definition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.parentNode)) {
        this.parentNode = data().deepCopy(fields()[4].schema(), other.parentNode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.termSource)) {
        this.termSource = data().deepCopy(fields()[5].schema(), other.termSource);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sourceRef)) {
        this.sourceRef = data().deepCopy(fields()[6].schema(), other.sourceRef);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sourceUrl)) {
        this.sourceUrl = data().deepCopy(fields()[7].schema(), other.sourceUrl);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.rawSchema)) {
        this.rawSchema = data().deepCopy(fields()[8].schema(), other.rawSchema);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'customProperties' field */
    public java.util.Map<java.lang.String,java.lang.String> getCustomProperties() {
      return customProperties;
    }
    
    /** Sets the value of the 'customProperties' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder setCustomProperties(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[0], value);
      this.customProperties = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'customProperties' field has been set */
    public boolean hasCustomProperties() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'customProperties' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder clearCustomProperties() {
      customProperties = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder setId(java.lang.String value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'id' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder setName(java.lang.String value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'name' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'definition' field */
    public java.lang.String getDefinition() {
      return definition;
    }
    
    /** Sets the value of the 'definition' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder setDefinition(java.lang.String value) {
      validate(fields()[3], value);
      this.definition = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'definition' field has been set */
    public boolean hasDefinition() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'definition' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder clearDefinition() {
      definition = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'parentNode' field */
    public java.lang.String getParentNode() {
      return parentNode;
    }
    
    /** Sets the value of the 'parentNode' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder setParentNode(java.lang.String value) {
      validate(fields()[4], value);
      this.parentNode = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'parentNode' field has been set */
    public boolean hasParentNode() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'parentNode' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder clearParentNode() {
      parentNode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'termSource' field */
    public java.lang.String getTermSource() {
      return termSource;
    }
    
    /** Sets the value of the 'termSource' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder setTermSource(java.lang.String value) {
      validate(fields()[5], value);
      this.termSource = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'termSource' field has been set */
    public boolean hasTermSource() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'termSource' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder clearTermSource() {
      termSource = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'sourceRef' field */
    public java.lang.String getSourceRef() {
      return sourceRef;
    }
    
    /** Sets the value of the 'sourceRef' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder setSourceRef(java.lang.String value) {
      validate(fields()[6], value);
      this.sourceRef = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'sourceRef' field has been set */
    public boolean hasSourceRef() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'sourceRef' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder clearSourceRef() {
      sourceRef = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'sourceUrl' field */
    public java.lang.String getSourceUrl() {
      return sourceUrl;
    }
    
    /** Sets the value of the 'sourceUrl' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder setSourceUrl(java.lang.String value) {
      validate(fields()[7], value);
      this.sourceUrl = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'sourceUrl' field has been set */
    public boolean hasSourceUrl() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'sourceUrl' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder clearSourceUrl() {
      sourceUrl = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'rawSchema' field */
    public java.lang.String getRawSchema() {
      return rawSchema;
    }
    
    /** Sets the value of the 'rawSchema' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder setRawSchema(java.lang.String value) {
      validate(fields()[8], value);
      this.rawSchema = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'rawSchema' field has been set */
    public boolean hasRawSchema() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'rawSchema' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryTermInfo.Builder clearRawSchema() {
      rawSchema = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public GlossaryTermInfo build() {
      try {
        GlossaryTermInfo record = new GlossaryTermInfo();
        record.customProperties = fieldSetFlags()[0] ? this.customProperties : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.String) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.definition = fieldSetFlags()[3] ? this.definition : (java.lang.String) defaultValue(fields()[3]);
        record.parentNode = fieldSetFlags()[4] ? this.parentNode : (java.lang.String) defaultValue(fields()[4]);
        record.termSource = fieldSetFlags()[5] ? this.termSource : (java.lang.String) defaultValue(fields()[5]);
        record.sourceRef = fieldSetFlags()[6] ? this.sourceRef : (java.lang.String) defaultValue(fields()[6]);
        record.sourceUrl = fieldSetFlags()[7] ? this.sourceUrl : (java.lang.String) defaultValue(fields()[7]);
        record.rawSchema = fieldSetFlags()[8] ? this.rawSchema : (java.lang.String) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
