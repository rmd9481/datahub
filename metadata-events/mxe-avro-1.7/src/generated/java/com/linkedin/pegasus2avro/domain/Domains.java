/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.domain;  
@SuppressWarnings("all")
/** Links from an Asset to its Domains */
@org.apache.avro.specific.AvroGenerated
public class Domains extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Domains\",\"namespace\":\"com.linkedin.pegasus2avro.domain\",\"doc\":\"Links from an Asset to its Domains\",\"fields\":[{\"name\":\"domains\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"The Domains attached to an Asset\",\"Relationship\":{\"/*\":{\"entityTypes\":[\"domain\"],\"name\":\"AssociatedWith\"}},\"Searchable\":{\"/*\":{\"addToFilters\":true,\"fieldName\":\"domains\",\"fieldType\":\"URN\",\"filterNameOverride\":\"Domain\",\"hasValuesFieldName\":\"hasDomain\"}}}],\"Aspect\":{\"name\":\"domains\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The Domains attached to an Asset */
  @Deprecated public java.util.List<java.lang.String> domains;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Domains() {}

  /**
   * All-args constructor.
   */
  public Domains(java.util.List<java.lang.String> domains) {
    this.domains = domains;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return domains;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: domains = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'domains' field.
   * The Domains attached to an Asset   */
  public java.util.List<java.lang.String> getDomains() {
    return domains;
  }

  /**
   * Sets the value of the 'domains' field.
   * The Domains attached to an Asset   * @param value the value to set.
   */
  public void setDomains(java.util.List<java.lang.String> value) {
    this.domains = value;
  }

  /** Creates a new Domains RecordBuilder */
  public static com.linkedin.pegasus2avro.domain.Domains.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.domain.Domains.Builder();
  }
  
  /** Creates a new Domains RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.domain.Domains.Builder newBuilder(com.linkedin.pegasus2avro.domain.Domains.Builder other) {
    return new com.linkedin.pegasus2avro.domain.Domains.Builder(other);
  }
  
  /** Creates a new Domains RecordBuilder by copying an existing Domains instance */
  public static com.linkedin.pegasus2avro.domain.Domains.Builder newBuilder(com.linkedin.pegasus2avro.domain.Domains other) {
    return new com.linkedin.pegasus2avro.domain.Domains.Builder(other);
  }
  
  /**
   * RecordBuilder for Domains instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Domains>
    implements org.apache.avro.data.RecordBuilder<Domains> {

    private java.util.List<java.lang.String> domains;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.domain.Domains.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.domain.Domains.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.domains)) {
        this.domains = data().deepCopy(fields()[0].schema(), other.domains);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Domains instance */
    private Builder(com.linkedin.pegasus2avro.domain.Domains other) {
            super(com.linkedin.pegasus2avro.domain.Domains.SCHEMA$);
      if (isValidValue(fields()[0], other.domains)) {
        this.domains = data().deepCopy(fields()[0].schema(), other.domains);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'domains' field */
    public java.util.List<java.lang.String> getDomains() {
      return domains;
    }
    
    /** Sets the value of the 'domains' field */
    public com.linkedin.pegasus2avro.domain.Domains.Builder setDomains(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.domains = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'domains' field has been set */
    public boolean hasDomains() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'domains' field */
    public com.linkedin.pegasus2avro.domain.Domains.Builder clearDomains() {
      domains = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public Domains build() {
      try {
        Domains record = new Domains();
        record.domains = fieldSetFlags()[0] ? this.domains : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
