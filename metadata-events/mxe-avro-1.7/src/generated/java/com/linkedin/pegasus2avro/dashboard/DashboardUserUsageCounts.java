/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.dashboard;  
@SuppressWarnings("all")
/** Records a single user's usage counts for a given resource */
@org.apache.avro.specific.AvroGenerated
public class DashboardUserUsageCounts extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DashboardUserUsageCounts\",\"namespace\":\"com.linkedin.pegasus2avro.dashboard\",\"doc\":\"Records a single user's usage counts for a given resource\",\"fields\":[{\"name\":\"user\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique id of the user.\",\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"viewsCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of times the user has viewed the dashboard\",\"default\":null,\"TimeseriesField\":{}},{\"name\":\"executionsCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of times the user has executed (refreshed) the dashboard\",\"default\":null,\"TimeseriesField\":{}},{\"name\":\"usageCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Normalized numeric metric representing user's dashboard usage -- the number of times the user executed or viewed the dashboard. \",\"default\":null,\"TimeseriesField\":{}},{\"name\":\"userEmail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"If user_email is set, we attempt to resolve the user's urn upon ingest\",\"default\":null,\"TimeseriesField\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The unique id of the user. */
  @Deprecated public java.lang.String user;
  /** The number of times the user has viewed the dashboard */
  @Deprecated public java.lang.Integer viewsCount;
  /** The number of times the user has executed (refreshed) the dashboard */
  @Deprecated public java.lang.Integer executionsCount;
  /** Normalized numeric metric representing user's dashboard usage -- the number of times the user executed or viewed the dashboard.  */
  @Deprecated public java.lang.Integer usageCount;
  /** If user_email is set, we attempt to resolve the user's urn upon ingest */
  @Deprecated public java.lang.String userEmail;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DashboardUserUsageCounts() {}

  /**
   * All-args constructor.
   */
  public DashboardUserUsageCounts(java.lang.String user, java.lang.Integer viewsCount, java.lang.Integer executionsCount, java.lang.Integer usageCount, java.lang.String userEmail) {
    this.user = user;
    this.viewsCount = viewsCount;
    this.executionsCount = executionsCount;
    this.usageCount = usageCount;
    this.userEmail = userEmail;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user;
    case 1: return viewsCount;
    case 2: return executionsCount;
    case 3: return usageCount;
    case 4: return userEmail;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user = (java.lang.String)value$; break;
    case 1: viewsCount = (java.lang.Integer)value$; break;
    case 2: executionsCount = (java.lang.Integer)value$; break;
    case 3: usageCount = (java.lang.Integer)value$; break;
    case 4: userEmail = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user' field.
   * The unique id of the user.   */
  public java.lang.String getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * The unique id of the user.   * @param value the value to set.
   */
  public void setUser(java.lang.String value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'viewsCount' field.
   * The number of times the user has viewed the dashboard   */
  public java.lang.Integer getViewsCount() {
    return viewsCount;
  }

  /**
   * Sets the value of the 'viewsCount' field.
   * The number of times the user has viewed the dashboard   * @param value the value to set.
   */
  public void setViewsCount(java.lang.Integer value) {
    this.viewsCount = value;
  }

  /**
   * Gets the value of the 'executionsCount' field.
   * The number of times the user has executed (refreshed) the dashboard   */
  public java.lang.Integer getExecutionsCount() {
    return executionsCount;
  }

  /**
   * Sets the value of the 'executionsCount' field.
   * The number of times the user has executed (refreshed) the dashboard   * @param value the value to set.
   */
  public void setExecutionsCount(java.lang.Integer value) {
    this.executionsCount = value;
  }

  /**
   * Gets the value of the 'usageCount' field.
   * Normalized numeric metric representing user's dashboard usage -- the number of times the user executed or viewed the dashboard.    */
  public java.lang.Integer getUsageCount() {
    return usageCount;
  }

  /**
   * Sets the value of the 'usageCount' field.
   * Normalized numeric metric representing user's dashboard usage -- the number of times the user executed or viewed the dashboard.    * @param value the value to set.
   */
  public void setUsageCount(java.lang.Integer value) {
    this.usageCount = value;
  }

  /**
   * Gets the value of the 'userEmail' field.
   * If user_email is set, we attempt to resolve the user's urn upon ingest   */
  public java.lang.String getUserEmail() {
    return userEmail;
  }

  /**
   * Sets the value of the 'userEmail' field.
   * If user_email is set, we attempt to resolve the user's urn upon ingest   * @param value the value to set.
   */
  public void setUserEmail(java.lang.String value) {
    this.userEmail = value;
  }

  /** Creates a new DashboardUserUsageCounts RecordBuilder */
  public static com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder();
  }
  
  /** Creates a new DashboardUserUsageCounts RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder newBuilder(com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder other) {
    return new com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder(other);
  }
  
  /** Creates a new DashboardUserUsageCounts RecordBuilder by copying an existing DashboardUserUsageCounts instance */
  public static com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder newBuilder(com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts other) {
    return new com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder(other);
  }
  
  /**
   * RecordBuilder for DashboardUserUsageCounts instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DashboardUserUsageCounts>
    implements org.apache.avro.data.RecordBuilder<DashboardUserUsageCounts> {

    private java.lang.String user;
    private java.lang.Integer viewsCount;
    private java.lang.Integer executionsCount;
    private java.lang.Integer usageCount;
    private java.lang.String userEmail;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.viewsCount)) {
        this.viewsCount = data().deepCopy(fields()[1].schema(), other.viewsCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.executionsCount)) {
        this.executionsCount = data().deepCopy(fields()[2].schema(), other.executionsCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.usageCount)) {
        this.usageCount = data().deepCopy(fields()[3].schema(), other.usageCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userEmail)) {
        this.userEmail = data().deepCopy(fields()[4].schema(), other.userEmail);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DashboardUserUsageCounts instance */
    private Builder(com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts other) {
            super(com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.SCHEMA$);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.viewsCount)) {
        this.viewsCount = data().deepCopy(fields()[1].schema(), other.viewsCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.executionsCount)) {
        this.executionsCount = data().deepCopy(fields()[2].schema(), other.executionsCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.usageCount)) {
        this.usageCount = data().deepCopy(fields()[3].schema(), other.usageCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userEmail)) {
        this.userEmail = data().deepCopy(fields()[4].schema(), other.userEmail);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'user' field */
    public java.lang.String getUser() {
      return user;
    }
    
    /** Sets the value of the 'user' field */
    public com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder setUser(java.lang.String value) {
      validate(fields()[0], value);
      this.user = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'user' field */
    public com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder clearUser() {
      user = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'viewsCount' field */
    public java.lang.Integer getViewsCount() {
      return viewsCount;
    }
    
    /** Sets the value of the 'viewsCount' field */
    public com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder setViewsCount(java.lang.Integer value) {
      validate(fields()[1], value);
      this.viewsCount = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'viewsCount' field has been set */
    public boolean hasViewsCount() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'viewsCount' field */
    public com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder clearViewsCount() {
      viewsCount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'executionsCount' field */
    public java.lang.Integer getExecutionsCount() {
      return executionsCount;
    }
    
    /** Sets the value of the 'executionsCount' field */
    public com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder setExecutionsCount(java.lang.Integer value) {
      validate(fields()[2], value);
      this.executionsCount = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'executionsCount' field has been set */
    public boolean hasExecutionsCount() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'executionsCount' field */
    public com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder clearExecutionsCount() {
      executionsCount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'usageCount' field */
    public java.lang.Integer getUsageCount() {
      return usageCount;
    }
    
    /** Sets the value of the 'usageCount' field */
    public com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder setUsageCount(java.lang.Integer value) {
      validate(fields()[3], value);
      this.usageCount = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'usageCount' field has been set */
    public boolean hasUsageCount() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'usageCount' field */
    public com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder clearUsageCount() {
      usageCount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'userEmail' field */
    public java.lang.String getUserEmail() {
      return userEmail;
    }
    
    /** Sets the value of the 'userEmail' field */
    public com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder setUserEmail(java.lang.String value) {
      validate(fields()[4], value);
      this.userEmail = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'userEmail' field has been set */
    public boolean hasUserEmail() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'userEmail' field */
    public com.linkedin.pegasus2avro.dashboard.DashboardUserUsageCounts.Builder clearUserEmail() {
      userEmail = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public DashboardUserUsageCounts build() {
      try {
        DashboardUserUsageCounts record = new DashboardUserUsageCounts();
        record.user = fieldSetFlags()[0] ? this.user : (java.lang.String) defaultValue(fields()[0]);
        record.viewsCount = fieldSetFlags()[1] ? this.viewsCount : (java.lang.Integer) defaultValue(fields()[1]);
        record.executionsCount = fieldSetFlags()[2] ? this.executionsCount : (java.lang.Integer) defaultValue(fields()[2]);
        record.usageCount = fieldSetFlags()[3] ? this.usageCount : (java.lang.Integer) defaultValue(fields()[3]);
        record.userEmail = fieldSetFlags()[4] ? this.userEmail : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
