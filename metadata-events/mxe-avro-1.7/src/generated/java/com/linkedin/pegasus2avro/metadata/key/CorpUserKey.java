/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.key;  
@SuppressWarnings("all")
/** Key for a CorpUser */
@org.apache.avro.specific.AvroGenerated
public class CorpUserKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CorpUserKey\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.key\",\"doc\":\"Key for a CorpUser\",\"fields\":[{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the AD/LDAP user.\",\"Searchable\":{\"boostScore\":2.0,\"enableAutocomplete\":true,\"fieldName\":\"ldap\",\"fieldType\":\"WORD_GRAM\"}}],\"Aspect\":{\"name\":\"corpUserKey\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The name of the AD/LDAP user. */
  @Deprecated public java.lang.String username;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CorpUserKey() {}

  /**
   * All-args constructor.
   */
  public CorpUserKey(java.lang.String username) {
    this.username = username;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return username;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: username = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'username' field.
   * The name of the AD/LDAP user.   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * The name of the AD/LDAP user.   * @param value the value to set.
   */
  public void setUsername(java.lang.String value) {
    this.username = value;
  }

  /** Creates a new CorpUserKey RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.key.CorpUserKey.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.key.CorpUserKey.Builder();
  }
  
  /** Creates a new CorpUserKey RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.key.CorpUserKey.Builder newBuilder(com.linkedin.pegasus2avro.metadata.key.CorpUserKey.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.key.CorpUserKey.Builder(other);
  }
  
  /** Creates a new CorpUserKey RecordBuilder by copying an existing CorpUserKey instance */
  public static com.linkedin.pegasus2avro.metadata.key.CorpUserKey.Builder newBuilder(com.linkedin.pegasus2avro.metadata.key.CorpUserKey other) {
    return new com.linkedin.pegasus2avro.metadata.key.CorpUserKey.Builder(other);
  }
  
  /**
   * RecordBuilder for CorpUserKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CorpUserKey>
    implements org.apache.avro.data.RecordBuilder<CorpUserKey> {

    private java.lang.String username;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.key.CorpUserKey.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.key.CorpUserKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CorpUserKey instance */
    private Builder(com.linkedin.pegasus2avro.metadata.key.CorpUserKey other) {
            super(com.linkedin.pegasus2avro.metadata.key.CorpUserKey.SCHEMA$);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'username' field */
    public java.lang.String getUsername() {
      return username;
    }
    
    /** Sets the value of the 'username' field */
    public com.linkedin.pegasus2avro.metadata.key.CorpUserKey.Builder setUsername(java.lang.String value) {
      validate(fields()[0], value);
      this.username = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'username' field has been set */
    public boolean hasUsername() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'username' field */
    public com.linkedin.pegasus2avro.metadata.key.CorpUserKey.Builder clearUsername() {
      username = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public CorpUserKey build() {
      try {
        CorpUserKey record = new CorpUserKey();
        record.username = fieldSetFlags()[0] ? this.username : (java.lang.String) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
