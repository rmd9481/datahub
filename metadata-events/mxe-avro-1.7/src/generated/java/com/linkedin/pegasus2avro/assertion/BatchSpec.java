/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.assertion;  
@SuppressWarnings("all")
/** A batch on which certain operations, e.g. data quality evaluation, is done. */
@org.apache.avro.specific.AvroGenerated
public class BatchSpec extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BatchSpec\",\"namespace\":\"com.linkedin.pegasus2avro.assertion\",\"doc\":\"A batch on which certain operations, e.g. data quality evaluation, is done.\",\"fields\":[{\"name\":\"customProperties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Custom property bag.\",\"default\":{},\"Searchable\":{\"/*\":{\"queryByDefault\":true}}},{\"name\":\"nativeBatchId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The native identifier as specified by the system operating on the batch.\",\"default\":null},{\"name\":\"query\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A query that identifies a batch of data\",\"default\":null},{\"name\":\"limit\",\"type\":[\"null\",\"int\"],\"doc\":\"Any limit to the number of rows in the batch, if applied\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Custom property bag. */
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> customProperties;
  /** The native identifier as specified by the system operating on the batch. */
  @Deprecated public java.lang.String nativeBatchId;
  /** A query that identifies a batch of data */
  @Deprecated public java.lang.String query;
  /** Any limit to the number of rows in the batch, if applied */
  @Deprecated public java.lang.Integer limit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public BatchSpec() {}

  /**
   * All-args constructor.
   */
  public BatchSpec(java.util.Map<java.lang.String,java.lang.String> customProperties, java.lang.String nativeBatchId, java.lang.String query, java.lang.Integer limit) {
    this.customProperties = customProperties;
    this.nativeBatchId = nativeBatchId;
    this.query = query;
    this.limit = limit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customProperties;
    case 1: return nativeBatchId;
    case 2: return query;
    case 3: return limit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customProperties = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 1: nativeBatchId = (java.lang.String)value$; break;
    case 2: query = (java.lang.String)value$; break;
    case 3: limit = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customProperties' field.
   * Custom property bag.   */
  public java.util.Map<java.lang.String,java.lang.String> getCustomProperties() {
    return customProperties;
  }

  /**
   * Sets the value of the 'customProperties' field.
   * Custom property bag.   * @param value the value to set.
   */
  public void setCustomProperties(java.util.Map<java.lang.String,java.lang.String> value) {
    this.customProperties = value;
  }

  /**
   * Gets the value of the 'nativeBatchId' field.
   * The native identifier as specified by the system operating on the batch.   */
  public java.lang.String getNativeBatchId() {
    return nativeBatchId;
  }

  /**
   * Sets the value of the 'nativeBatchId' field.
   * The native identifier as specified by the system operating on the batch.   * @param value the value to set.
   */
  public void setNativeBatchId(java.lang.String value) {
    this.nativeBatchId = value;
  }

  /**
   * Gets the value of the 'query' field.
   * A query that identifies a batch of data   */
  public java.lang.String getQuery() {
    return query;
  }

  /**
   * Sets the value of the 'query' field.
   * A query that identifies a batch of data   * @param value the value to set.
   */
  public void setQuery(java.lang.String value) {
    this.query = value;
  }

  /**
   * Gets the value of the 'limit' field.
   * Any limit to the number of rows in the batch, if applied   */
  public java.lang.Integer getLimit() {
    return limit;
  }

  /**
   * Sets the value of the 'limit' field.
   * Any limit to the number of rows in the batch, if applied   * @param value the value to set.
   */
  public void setLimit(java.lang.Integer value) {
    this.limit = value;
  }

  /** Creates a new BatchSpec RecordBuilder */
  public static com.linkedin.pegasus2avro.assertion.BatchSpec.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.assertion.BatchSpec.Builder();
  }
  
  /** Creates a new BatchSpec RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.assertion.BatchSpec.Builder newBuilder(com.linkedin.pegasus2avro.assertion.BatchSpec.Builder other) {
    return new com.linkedin.pegasus2avro.assertion.BatchSpec.Builder(other);
  }
  
  /** Creates a new BatchSpec RecordBuilder by copying an existing BatchSpec instance */
  public static com.linkedin.pegasus2avro.assertion.BatchSpec.Builder newBuilder(com.linkedin.pegasus2avro.assertion.BatchSpec other) {
    return new com.linkedin.pegasus2avro.assertion.BatchSpec.Builder(other);
  }
  
  /**
   * RecordBuilder for BatchSpec instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BatchSpec>
    implements org.apache.avro.data.RecordBuilder<BatchSpec> {

    private java.util.Map<java.lang.String,java.lang.String> customProperties;
    private java.lang.String nativeBatchId;
    private java.lang.String query;
    private java.lang.Integer limit;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.assertion.BatchSpec.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.assertion.BatchSpec.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customProperties)) {
        this.customProperties = data().deepCopy(fields()[0].schema(), other.customProperties);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nativeBatchId)) {
        this.nativeBatchId = data().deepCopy(fields()[1].schema(), other.nativeBatchId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.query)) {
        this.query = data().deepCopy(fields()[2].schema(), other.query);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.limit)) {
        this.limit = data().deepCopy(fields()[3].schema(), other.limit);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing BatchSpec instance */
    private Builder(com.linkedin.pegasus2avro.assertion.BatchSpec other) {
            super(com.linkedin.pegasus2avro.assertion.BatchSpec.SCHEMA$);
      if (isValidValue(fields()[0], other.customProperties)) {
        this.customProperties = data().deepCopy(fields()[0].schema(), other.customProperties);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nativeBatchId)) {
        this.nativeBatchId = data().deepCopy(fields()[1].schema(), other.nativeBatchId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.query)) {
        this.query = data().deepCopy(fields()[2].schema(), other.query);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.limit)) {
        this.limit = data().deepCopy(fields()[3].schema(), other.limit);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'customProperties' field */
    public java.util.Map<java.lang.String,java.lang.String> getCustomProperties() {
      return customProperties;
    }
    
    /** Sets the value of the 'customProperties' field */
    public com.linkedin.pegasus2avro.assertion.BatchSpec.Builder setCustomProperties(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[0], value);
      this.customProperties = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'customProperties' field has been set */
    public boolean hasCustomProperties() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'customProperties' field */
    public com.linkedin.pegasus2avro.assertion.BatchSpec.Builder clearCustomProperties() {
      customProperties = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'nativeBatchId' field */
    public java.lang.String getNativeBatchId() {
      return nativeBatchId;
    }
    
    /** Sets the value of the 'nativeBatchId' field */
    public com.linkedin.pegasus2avro.assertion.BatchSpec.Builder setNativeBatchId(java.lang.String value) {
      validate(fields()[1], value);
      this.nativeBatchId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'nativeBatchId' field has been set */
    public boolean hasNativeBatchId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'nativeBatchId' field */
    public com.linkedin.pegasus2avro.assertion.BatchSpec.Builder clearNativeBatchId() {
      nativeBatchId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'query' field */
    public java.lang.String getQuery() {
      return query;
    }
    
    /** Sets the value of the 'query' field */
    public com.linkedin.pegasus2avro.assertion.BatchSpec.Builder setQuery(java.lang.String value) {
      validate(fields()[2], value);
      this.query = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'query' field has been set */
    public boolean hasQuery() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'query' field */
    public com.linkedin.pegasus2avro.assertion.BatchSpec.Builder clearQuery() {
      query = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'limit' field */
    public java.lang.Integer getLimit() {
      return limit;
    }
    
    /** Sets the value of the 'limit' field */
    public com.linkedin.pegasus2avro.assertion.BatchSpec.Builder setLimit(java.lang.Integer value) {
      validate(fields()[3], value);
      this.limit = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'limit' field has been set */
    public boolean hasLimit() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'limit' field */
    public com.linkedin.pegasus2avro.assertion.BatchSpec.Builder clearLimit() {
      limit = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public BatchSpec build() {
      try {
        BatchSpec record = new BatchSpec();
        record.customProperties = fieldSetFlags()[0] ? this.customProperties : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[0]);
        record.nativeBatchId = fieldSetFlags()[1] ? this.nativeBatchId : (java.lang.String) defaultValue(fields()[1]);
        record.query = fieldSetFlags()[2] ? this.query : (java.lang.String) defaultValue(fields()[2]);
        record.limit = fieldSetFlags()[3] ? this.limit : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
