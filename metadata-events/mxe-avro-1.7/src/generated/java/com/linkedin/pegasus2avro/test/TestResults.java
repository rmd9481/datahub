/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.test;  
@SuppressWarnings("all")
/** Information about a Test Result */
@org.apache.avro.specific.AvroGenerated
public class TestResults extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestResults\",\"namespace\":\"com.linkedin.pegasus2avro.test\",\"doc\":\"Information about a Test Result\",\"fields\":[{\"name\":\"failing\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TestResult\",\"doc\":\"Information about a Test Result\",\"fields\":[{\"name\":\"test\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The urn of the test\",\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TestResultType\",\"symbols\":[\"SUCCESS\",\"FAILURE\"],\"symbolDocs\":{\"FAILURE\":\" The Test Failed\",\"SUCCESS\":\" The Test Succeeded\"}},\"doc\":\"The type of the result\"}]}},\"doc\":\"Results that are failing\",\"Relationship\":{\"/*/test\":{\"entityTypes\":[\"test\"],\"name\":\"IsFailing\"}},\"Searchable\":{\"/*/test\":{\"fieldName\":\"failingTests\",\"fieldType\":\"URN\",\"hasValuesFieldName\":\"hasFailingTests\"}}},{\"name\":\"passing\",\"type\":{\"type\":\"array\",\"items\":\"TestResult\"},\"doc\":\"Results that are passing\",\"Relationship\":{\"/*/test\":{\"entityTypes\":[\"test\"],\"name\":\"IsPassing\"}},\"Searchable\":{\"/*/test\":{\"fieldName\":\"passingTests\",\"fieldType\":\"URN\",\"hasValuesFieldName\":\"hasPassingTests\"}}}],\"Aspect\":{\"name\":\"testResults\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Results that are failing */
  @Deprecated public java.util.List<com.linkedin.pegasus2avro.test.TestResult> failing;
  /** Results that are passing */
  @Deprecated public java.util.List<com.linkedin.pegasus2avro.test.TestResult> passing;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TestResults() {}

  /**
   * All-args constructor.
   */
  public TestResults(java.util.List<com.linkedin.pegasus2avro.test.TestResult> failing, java.util.List<com.linkedin.pegasus2avro.test.TestResult> passing) {
    this.failing = failing;
    this.passing = passing;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return failing;
    case 1: return passing;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: failing = (java.util.List<com.linkedin.pegasus2avro.test.TestResult>)value$; break;
    case 1: passing = (java.util.List<com.linkedin.pegasus2avro.test.TestResult>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'failing' field.
   * Results that are failing   */
  public java.util.List<com.linkedin.pegasus2avro.test.TestResult> getFailing() {
    return failing;
  }

  /**
   * Sets the value of the 'failing' field.
   * Results that are failing   * @param value the value to set.
   */
  public void setFailing(java.util.List<com.linkedin.pegasus2avro.test.TestResult> value) {
    this.failing = value;
  }

  /**
   * Gets the value of the 'passing' field.
   * Results that are passing   */
  public java.util.List<com.linkedin.pegasus2avro.test.TestResult> getPassing() {
    return passing;
  }

  /**
   * Sets the value of the 'passing' field.
   * Results that are passing   * @param value the value to set.
   */
  public void setPassing(java.util.List<com.linkedin.pegasus2avro.test.TestResult> value) {
    this.passing = value;
  }

  /** Creates a new TestResults RecordBuilder */
  public static com.linkedin.pegasus2avro.test.TestResults.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.test.TestResults.Builder();
  }
  
  /** Creates a new TestResults RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.test.TestResults.Builder newBuilder(com.linkedin.pegasus2avro.test.TestResults.Builder other) {
    return new com.linkedin.pegasus2avro.test.TestResults.Builder(other);
  }
  
  /** Creates a new TestResults RecordBuilder by copying an existing TestResults instance */
  public static com.linkedin.pegasus2avro.test.TestResults.Builder newBuilder(com.linkedin.pegasus2avro.test.TestResults other) {
    return new com.linkedin.pegasus2avro.test.TestResults.Builder(other);
  }
  
  /**
   * RecordBuilder for TestResults instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestResults>
    implements org.apache.avro.data.RecordBuilder<TestResults> {

    private java.util.List<com.linkedin.pegasus2avro.test.TestResult> failing;
    private java.util.List<com.linkedin.pegasus2avro.test.TestResult> passing;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.test.TestResults.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.test.TestResults.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.failing)) {
        this.failing = data().deepCopy(fields()[0].schema(), other.failing);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.passing)) {
        this.passing = data().deepCopy(fields()[1].schema(), other.passing);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TestResults instance */
    private Builder(com.linkedin.pegasus2avro.test.TestResults other) {
            super(com.linkedin.pegasus2avro.test.TestResults.SCHEMA$);
      if (isValidValue(fields()[0], other.failing)) {
        this.failing = data().deepCopy(fields()[0].schema(), other.failing);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.passing)) {
        this.passing = data().deepCopy(fields()[1].schema(), other.passing);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'failing' field */
    public java.util.List<com.linkedin.pegasus2avro.test.TestResult> getFailing() {
      return failing;
    }
    
    /** Sets the value of the 'failing' field */
    public com.linkedin.pegasus2avro.test.TestResults.Builder setFailing(java.util.List<com.linkedin.pegasus2avro.test.TestResult> value) {
      validate(fields()[0], value);
      this.failing = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'failing' field has been set */
    public boolean hasFailing() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'failing' field */
    public com.linkedin.pegasus2avro.test.TestResults.Builder clearFailing() {
      failing = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'passing' field */
    public java.util.List<com.linkedin.pegasus2avro.test.TestResult> getPassing() {
      return passing;
    }
    
    /** Sets the value of the 'passing' field */
    public com.linkedin.pegasus2avro.test.TestResults.Builder setPassing(java.util.List<com.linkedin.pegasus2avro.test.TestResult> value) {
      validate(fields()[1], value);
      this.passing = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'passing' field has been set */
    public boolean hasPassing() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'passing' field */
    public com.linkedin.pegasus2avro.test.TestResults.Builder clearPassing() {
      passing = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TestResults build() {
      try {
        TestResults record = new TestResults();
        record.failing = fieldSetFlags()[0] ? this.failing : (java.util.List<com.linkedin.pegasus2avro.test.TestResult>) defaultValue(fields()[0]);
        record.passing = fieldSetFlags()[1] ? this.passing : (java.util.List<com.linkedin.pegasus2avro.test.TestResult>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
