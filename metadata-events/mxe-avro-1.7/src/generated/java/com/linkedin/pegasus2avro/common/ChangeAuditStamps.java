/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.common;  
@SuppressWarnings("all")
/** Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into various lifecycle stages, and who acted to move it into those lifecycle stages. The recommended best practice is to include this record in your record schema, and annotate its fields as @readOnly in your resource. See https://github.com/linkedin/rest.li/wiki/Validation-in-Rest.li#restli-validation-annotations */
@org.apache.avro.specific.AvroGenerated
public class ChangeAuditStamps extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChangeAuditStamps\",\"namespace\":\"com.linkedin.pegasus2avro.common\",\"doc\":\"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into various lifecycle stages, and who acted to move it into those lifecycle stages. The recommended best practice is to include this record in your record schema, and annotate its fields as @readOnly in your resource. See https://github.com/linkedin/rest.li/wiki/Validation-in-Rest.li#restli-validation-annotations\",\"fields\":[{\"name\":\"created\",\"type\":{\"type\":\"record\",\"name\":\"AuditStamp\",\"doc\":\"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.\",\"fields\":[{\"name\":\"time\",\"type\":\"long\",\"doc\":\"When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent.\"},{\"name\":\"actor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change.\",\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"impersonator\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.\",\"default\":null,\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually.\",\"default\":null}]},\"doc\":\"An AuditStamp corresponding to the creation of this resource/association/sub-resource. A value of 0 for time indicates missing data.\",\"default\":{\"actor\":\"urn:li:corpuser:unknown\",\"impersonator\":null,\"time\":0,\"message\":null}},{\"name\":\"lastModified\",\"type\":\"AuditStamp\",\"doc\":\"An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created. A value of 0 for time indicates missing data.\",\"default\":{\"actor\":\"urn:li:corpuser:unknown\",\"impersonator\":null,\"time\":0,\"message\":null}},{\"name\":\"deleted\",\"type\":[\"null\",\"AuditStamp\"],\"doc\":\"An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** An AuditStamp corresponding to the creation of this resource/association/sub-resource. A value of 0 for time indicates missing data. */
  @Deprecated public com.linkedin.pegasus2avro.common.AuditStamp created;
  /** An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created. A value of 0 for time indicates missing data. */
  @Deprecated public com.linkedin.pegasus2avro.common.AuditStamp lastModified;
  /** An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics. */
  @Deprecated public com.linkedin.pegasus2avro.common.AuditStamp deleted;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ChangeAuditStamps() {}

  /**
   * All-args constructor.
   */
  public ChangeAuditStamps(com.linkedin.pegasus2avro.common.AuditStamp created, com.linkedin.pegasus2avro.common.AuditStamp lastModified, com.linkedin.pegasus2avro.common.AuditStamp deleted) {
    this.created = created;
    this.lastModified = lastModified;
    this.deleted = deleted;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return created;
    case 1: return lastModified;
    case 2: return deleted;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: created = (com.linkedin.pegasus2avro.common.AuditStamp)value$; break;
    case 1: lastModified = (com.linkedin.pegasus2avro.common.AuditStamp)value$; break;
    case 2: deleted = (com.linkedin.pegasus2avro.common.AuditStamp)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'created' field.
   * An AuditStamp corresponding to the creation of this resource/association/sub-resource. A value of 0 for time indicates missing data.   */
  public com.linkedin.pegasus2avro.common.AuditStamp getCreated() {
    return created;
  }

  /**
   * Sets the value of the 'created' field.
   * An AuditStamp corresponding to the creation of this resource/association/sub-resource. A value of 0 for time indicates missing data.   * @param value the value to set.
   */
  public void setCreated(com.linkedin.pegasus2avro.common.AuditStamp value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'lastModified' field.
   * An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created. A value of 0 for time indicates missing data.   */
  public com.linkedin.pegasus2avro.common.AuditStamp getLastModified() {
    return lastModified;
  }

  /**
   * Sets the value of the 'lastModified' field.
   * An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created. A value of 0 for time indicates missing data.   * @param value the value to set.
   */
  public void setLastModified(com.linkedin.pegasus2avro.common.AuditStamp value) {
    this.lastModified = value;
  }

  /**
   * Gets the value of the 'deleted' field.
   * An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.   */
  public com.linkedin.pegasus2avro.common.AuditStamp getDeleted() {
    return deleted;
  }

  /**
   * Sets the value of the 'deleted' field.
   * An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.   * @param value the value to set.
   */
  public void setDeleted(com.linkedin.pegasus2avro.common.AuditStamp value) {
    this.deleted = value;
  }

  /** Creates a new ChangeAuditStamps RecordBuilder */
  public static com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder();
  }
  
  /** Creates a new ChangeAuditStamps RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder newBuilder(com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder other) {
    return new com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder(other);
  }
  
  /** Creates a new ChangeAuditStamps RecordBuilder by copying an existing ChangeAuditStamps instance */
  public static com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder newBuilder(com.linkedin.pegasus2avro.common.ChangeAuditStamps other) {
    return new com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder(other);
  }
  
  /**
   * RecordBuilder for ChangeAuditStamps instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChangeAuditStamps>
    implements org.apache.avro.data.RecordBuilder<ChangeAuditStamps> {

    private com.linkedin.pegasus2avro.common.AuditStamp created;
    private com.linkedin.pegasus2avro.common.AuditStamp lastModified;
    private com.linkedin.pegasus2avro.common.AuditStamp deleted;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.common.ChangeAuditStamps.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.created)) {
        this.created = data().deepCopy(fields()[0].schema(), other.created);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastModified)) {
        this.lastModified = data().deepCopy(fields()[1].schema(), other.lastModified);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deleted)) {
        this.deleted = data().deepCopy(fields()[2].schema(), other.deleted);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ChangeAuditStamps instance */
    private Builder(com.linkedin.pegasus2avro.common.ChangeAuditStamps other) {
            super(com.linkedin.pegasus2avro.common.ChangeAuditStamps.SCHEMA$);
      if (isValidValue(fields()[0], other.created)) {
        this.created = data().deepCopy(fields()[0].schema(), other.created);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastModified)) {
        this.lastModified = data().deepCopy(fields()[1].schema(), other.lastModified);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deleted)) {
        this.deleted = data().deepCopy(fields()[2].schema(), other.deleted);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'created' field */
    public com.linkedin.pegasus2avro.common.AuditStamp getCreated() {
      return created;
    }
    
    /** Sets the value of the 'created' field */
    public com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder setCreated(com.linkedin.pegasus2avro.common.AuditStamp value) {
      validate(fields()[0], value);
      this.created = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'created' field has been set */
    public boolean hasCreated() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'created' field */
    public com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder clearCreated() {
      created = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'lastModified' field */
    public com.linkedin.pegasus2avro.common.AuditStamp getLastModified() {
      return lastModified;
    }
    
    /** Sets the value of the 'lastModified' field */
    public com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder setLastModified(com.linkedin.pegasus2avro.common.AuditStamp value) {
      validate(fields()[1], value);
      this.lastModified = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'lastModified' field has been set */
    public boolean hasLastModified() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'lastModified' field */
    public com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder clearLastModified() {
      lastModified = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'deleted' field */
    public com.linkedin.pegasus2avro.common.AuditStamp getDeleted() {
      return deleted;
    }
    
    /** Sets the value of the 'deleted' field */
    public com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder setDeleted(com.linkedin.pegasus2avro.common.AuditStamp value) {
      validate(fields()[2], value);
      this.deleted = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'deleted' field has been set */
    public boolean hasDeleted() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'deleted' field */
    public com.linkedin.pegasus2avro.common.ChangeAuditStamps.Builder clearDeleted() {
      deleted = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ChangeAuditStamps build() {
      try {
        ChangeAuditStamps record = new ChangeAuditStamps();
        record.created = fieldSetFlags()[0] ? this.created : (com.linkedin.pegasus2avro.common.AuditStamp) defaultValue(fields()[0]);
        record.lastModified = fieldSetFlags()[1] ? this.lastModified : (com.linkedin.pegasus2avro.common.AuditStamp) defaultValue(fields()[1]);
        record.deleted = fieldSetFlags()[2] ? this.deleted : (com.linkedin.pegasus2avro.common.AuditStamp) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
