/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.run;  
@SuppressWarnings("all")
/** Metadata about how an aspect is related to some urn */
@org.apache.avro.specific.AvroGenerated
public class RelatedAspect extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RelatedAspect\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.run\",\"doc\":\"Metadata about how an aspect is related to some urn\",\"fields\":[{\"name\":\"entity\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\" Urn of the entity that is referenced by the aspect.\",\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"aspect\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"relationship\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /**  Urn of the entity that is referenced by the aspect. */
  @Deprecated public java.lang.String entity;
  @Deprecated public java.lang.String aspect;
  @Deprecated public java.lang.String relationship;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RelatedAspect() {}

  /**
   * All-args constructor.
   */
  public RelatedAspect(java.lang.String entity, java.lang.String aspect, java.lang.String relationship) {
    this.entity = entity;
    this.aspect = aspect;
    this.relationship = relationship;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return entity;
    case 1: return aspect;
    case 2: return relationship;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: entity = (java.lang.String)value$; break;
    case 1: aspect = (java.lang.String)value$; break;
    case 2: relationship = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'entity' field.
   *  Urn of the entity that is referenced by the aspect.   */
  public java.lang.String getEntity() {
    return entity;
  }

  /**
   * Sets the value of the 'entity' field.
   *  Urn of the entity that is referenced by the aspect.   * @param value the value to set.
   */
  public void setEntity(java.lang.String value) {
    this.entity = value;
  }

  /**
   * Gets the value of the 'aspect' field.
   */
  public java.lang.String getAspect() {
    return aspect;
  }

  /**
   * Sets the value of the 'aspect' field.
   * @param value the value to set.
   */
  public void setAspect(java.lang.String value) {
    this.aspect = value;
  }

  /**
   * Gets the value of the 'relationship' field.
   */
  public java.lang.String getRelationship() {
    return relationship;
  }

  /**
   * Sets the value of the 'relationship' field.
   * @param value the value to set.
   */
  public void setRelationship(java.lang.String value) {
    this.relationship = value;
  }

  /** Creates a new RelatedAspect RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder();
  }
  
  /** Creates a new RelatedAspect RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder newBuilder(com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder(other);
  }
  
  /** Creates a new RelatedAspect RecordBuilder by copying an existing RelatedAspect instance */
  public static com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder newBuilder(com.linkedin.pegasus2avro.metadata.run.RelatedAspect other) {
    return new com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder(other);
  }
  
  /**
   * RecordBuilder for RelatedAspect instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RelatedAspect>
    implements org.apache.avro.data.RecordBuilder<RelatedAspect> {

    private java.lang.String entity;
    private java.lang.String aspect;
    private java.lang.String relationship;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.run.RelatedAspect.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.entity)) {
        this.entity = data().deepCopy(fields()[0].schema(), other.entity);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aspect)) {
        this.aspect = data().deepCopy(fields()[1].schema(), other.aspect);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.relationship)) {
        this.relationship = data().deepCopy(fields()[2].schema(), other.relationship);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RelatedAspect instance */
    private Builder(com.linkedin.pegasus2avro.metadata.run.RelatedAspect other) {
            super(com.linkedin.pegasus2avro.metadata.run.RelatedAspect.SCHEMA$);
      if (isValidValue(fields()[0], other.entity)) {
        this.entity = data().deepCopy(fields()[0].schema(), other.entity);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aspect)) {
        this.aspect = data().deepCopy(fields()[1].schema(), other.aspect);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.relationship)) {
        this.relationship = data().deepCopy(fields()[2].schema(), other.relationship);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'entity' field */
    public java.lang.String getEntity() {
      return entity;
    }
    
    /** Sets the value of the 'entity' field */
    public com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder setEntity(java.lang.String value) {
      validate(fields()[0], value);
      this.entity = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'entity' field has been set */
    public boolean hasEntity() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'entity' field */
    public com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder clearEntity() {
      entity = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'aspect' field */
    public java.lang.String getAspect() {
      return aspect;
    }
    
    /** Sets the value of the 'aspect' field */
    public com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder setAspect(java.lang.String value) {
      validate(fields()[1], value);
      this.aspect = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'aspect' field has been set */
    public boolean hasAspect() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'aspect' field */
    public com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder clearAspect() {
      aspect = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'relationship' field */
    public java.lang.String getRelationship() {
      return relationship;
    }
    
    /** Sets the value of the 'relationship' field */
    public com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder setRelationship(java.lang.String value) {
      validate(fields()[2], value);
      this.relationship = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'relationship' field has been set */
    public boolean hasRelationship() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'relationship' field */
    public com.linkedin.pegasus2avro.metadata.run.RelatedAspect.Builder clearRelationship() {
      relationship = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public RelatedAspect build() {
      try {
        RelatedAspect record = new RelatedAspect();
        record.entity = fieldSetFlags()[0] ? this.entity : (java.lang.String) defaultValue(fields()[0]);
        record.aspect = fieldSetFlags()[1] ? this.aspect : (java.lang.String) defaultValue(fields()[1]);
        record.relationship = fieldSetFlags()[2] ? this.relationship : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
