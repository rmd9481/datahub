/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.timeseries;  
@SuppressWarnings("all")
/** Defines the size of a time window. */
@org.apache.avro.specific.AvroGenerated
public class TimeWindowSize extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TimeWindowSize\",\"namespace\":\"com.linkedin.pegasus2avro.timeseries\",\"doc\":\"Defines the size of a time window.\",\"fields\":[{\"name\":\"unit\",\"type\":{\"type\":\"enum\",\"name\":\"CalendarInterval\",\"symbols\":[\"SECOND\",\"MINUTE\",\"HOUR\",\"DAY\",\"WEEK\",\"MONTH\",\"QUARTER\",\"YEAR\"]},\"doc\":\"Interval unit such as minute/hour/day etc.\"},{\"name\":\"multiple\",\"type\":\"int\",\"doc\":\"How many units. Defaults to 1.\",\"default\":1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Interval unit such as minute/hour/day etc. */
  @Deprecated public com.linkedin.pegasus2avro.timeseries.CalendarInterval unit;
  /** How many units. Defaults to 1. */
  @Deprecated public int multiple;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TimeWindowSize() {}

  /**
   * All-args constructor.
   */
  public TimeWindowSize(com.linkedin.pegasus2avro.timeseries.CalendarInterval unit, java.lang.Integer multiple) {
    this.unit = unit;
    this.multiple = multiple;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return unit;
    case 1: return multiple;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: unit = (com.linkedin.pegasus2avro.timeseries.CalendarInterval)value$; break;
    case 1: multiple = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'unit' field.
   * Interval unit such as minute/hour/day etc.   */
  public com.linkedin.pegasus2avro.timeseries.CalendarInterval getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * Interval unit such as minute/hour/day etc.   * @param value the value to set.
   */
  public void setUnit(com.linkedin.pegasus2avro.timeseries.CalendarInterval value) {
    this.unit = value;
  }

  /**
   * Gets the value of the 'multiple' field.
   * How many units. Defaults to 1.   */
  public java.lang.Integer getMultiple() {
    return multiple;
  }

  /**
   * Sets the value of the 'multiple' field.
   * How many units. Defaults to 1.   * @param value the value to set.
   */
  public void setMultiple(java.lang.Integer value) {
    this.multiple = value;
  }

  /** Creates a new TimeWindowSize RecordBuilder */
  public static com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder();
  }
  
  /** Creates a new TimeWindowSize RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder newBuilder(com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder other) {
    return new com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder(other);
  }
  
  /** Creates a new TimeWindowSize RecordBuilder by copying an existing TimeWindowSize instance */
  public static com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder newBuilder(com.linkedin.pegasus2avro.timeseries.TimeWindowSize other) {
    return new com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder(other);
  }
  
  /**
   * RecordBuilder for TimeWindowSize instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TimeWindowSize>
    implements org.apache.avro.data.RecordBuilder<TimeWindowSize> {

    private com.linkedin.pegasus2avro.timeseries.CalendarInterval unit;
    private int multiple;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.timeseries.TimeWindowSize.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.unit)) {
        this.unit = data().deepCopy(fields()[0].schema(), other.unit);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.multiple)) {
        this.multiple = data().deepCopy(fields()[1].schema(), other.multiple);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TimeWindowSize instance */
    private Builder(com.linkedin.pegasus2avro.timeseries.TimeWindowSize other) {
            super(com.linkedin.pegasus2avro.timeseries.TimeWindowSize.SCHEMA$);
      if (isValidValue(fields()[0], other.unit)) {
        this.unit = data().deepCopy(fields()[0].schema(), other.unit);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.multiple)) {
        this.multiple = data().deepCopy(fields()[1].schema(), other.multiple);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'unit' field */
    public com.linkedin.pegasus2avro.timeseries.CalendarInterval getUnit() {
      return unit;
    }
    
    /** Sets the value of the 'unit' field */
    public com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder setUnit(com.linkedin.pegasus2avro.timeseries.CalendarInterval value) {
      validate(fields()[0], value);
      this.unit = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'unit' field has been set */
    public boolean hasUnit() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'unit' field */
    public com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'multiple' field */
    public java.lang.Integer getMultiple() {
      return multiple;
    }
    
    /** Sets the value of the 'multiple' field */
    public com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder setMultiple(int value) {
      validate(fields()[1], value);
      this.multiple = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'multiple' field has been set */
    public boolean hasMultiple() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'multiple' field */
    public com.linkedin.pegasus2avro.timeseries.TimeWindowSize.Builder clearMultiple() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TimeWindowSize build() {
      try {
        TimeWindowSize record = new TimeWindowSize();
        record.unit = fieldSetFlags()[0] ? this.unit : (com.linkedin.pegasus2avro.timeseries.CalendarInterval) defaultValue(fields()[0]);
        record.multiple = fieldSetFlags()[1] ? this.multiple : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
