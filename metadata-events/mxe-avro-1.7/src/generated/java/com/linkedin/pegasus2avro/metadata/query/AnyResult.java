/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.query;  
@SuppressWarnings("all")
/** A common model for the result of any query. 
Expected to be included into other top level query results. */
@org.apache.avro.specific.AvroGenerated
public class AnyResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AnyResult\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.query\",\"doc\":\"A common model for the result of any query. \\nExpected to be included into other top level query results.\",\"fields\":[{\"name\":\"freshness\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FreshnessStats\",\"doc\":\"Stats that describe the freshness of a dataset or query result.\\nUseful to describe consistency and staleness of results when served\\nout of a cache or other eventually consistent system.\",\"fields\":[{\"name\":\"cached\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"systemFreshness\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"long\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"doc\":\"Freshness Stats to help a caller understand the freshness of the results\\nUseful when the results are being retrieved from a cache, index or other eventually consistent storage\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Freshness Stats to help a caller understand the freshness of the results
Useful when the results are being retrieved from a cache, index or other eventually consistent storage */
  @Deprecated public com.linkedin.pegasus2avro.metadata.query.FreshnessStats freshness;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AnyResult() {}

  /**
   * All-args constructor.
   */
  public AnyResult(com.linkedin.pegasus2avro.metadata.query.FreshnessStats freshness) {
    this.freshness = freshness;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return freshness;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: freshness = (com.linkedin.pegasus2avro.metadata.query.FreshnessStats)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'freshness' field.
   * Freshness Stats to help a caller understand the freshness of the results
Useful when the results are being retrieved from a cache, index or other eventually consistent storage   */
  public com.linkedin.pegasus2avro.metadata.query.FreshnessStats getFreshness() {
    return freshness;
  }

  /**
   * Sets the value of the 'freshness' field.
   * Freshness Stats to help a caller understand the freshness of the results
Useful when the results are being retrieved from a cache, index or other eventually consistent storage   * @param value the value to set.
   */
  public void setFreshness(com.linkedin.pegasus2avro.metadata.query.FreshnessStats value) {
    this.freshness = value;
  }

  /** Creates a new AnyResult RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.query.AnyResult.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.query.AnyResult.Builder();
  }
  
  /** Creates a new AnyResult RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.query.AnyResult.Builder newBuilder(com.linkedin.pegasus2avro.metadata.query.AnyResult.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.query.AnyResult.Builder(other);
  }
  
  /** Creates a new AnyResult RecordBuilder by copying an existing AnyResult instance */
  public static com.linkedin.pegasus2avro.metadata.query.AnyResult.Builder newBuilder(com.linkedin.pegasus2avro.metadata.query.AnyResult other) {
    return new com.linkedin.pegasus2avro.metadata.query.AnyResult.Builder(other);
  }
  
  /**
   * RecordBuilder for AnyResult instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AnyResult>
    implements org.apache.avro.data.RecordBuilder<AnyResult> {

    private com.linkedin.pegasus2avro.metadata.query.FreshnessStats freshness;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.query.AnyResult.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.query.AnyResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.freshness)) {
        this.freshness = data().deepCopy(fields()[0].schema(), other.freshness);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AnyResult instance */
    private Builder(com.linkedin.pegasus2avro.metadata.query.AnyResult other) {
            super(com.linkedin.pegasus2avro.metadata.query.AnyResult.SCHEMA$);
      if (isValidValue(fields()[0], other.freshness)) {
        this.freshness = data().deepCopy(fields()[0].schema(), other.freshness);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'freshness' field */
    public com.linkedin.pegasus2avro.metadata.query.FreshnessStats getFreshness() {
      return freshness;
    }
    
    /** Sets the value of the 'freshness' field */
    public com.linkedin.pegasus2avro.metadata.query.AnyResult.Builder setFreshness(com.linkedin.pegasus2avro.metadata.query.FreshnessStats value) {
      validate(fields()[0], value);
      this.freshness = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'freshness' field has been set */
    public boolean hasFreshness() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'freshness' field */
    public com.linkedin.pegasus2avro.metadata.query.AnyResult.Builder clearFreshness() {
      freshness = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public AnyResult build() {
      try {
        AnyResult record = new AnyResult();
        record.freshness = fieldSetFlags()[0] ? this.freshness : (com.linkedin.pegasus2avro.metadata.query.FreshnessStats) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
