/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.notebook;  
@SuppressWarnings("all")
/** A record of all supported cells for a Notebook. Only one type of cell will be non-null. */
@org.apache.avro.specific.AvroGenerated
public class NotebookCell extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NotebookCell\",\"namespace\":\"com.linkedin.pegasus2avro.notebook\",\"doc\":\"A record of all supported cells for a Notebook. Only one type of cell will be non-null.\",\"fields\":[{\"name\":\"textCell\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TextCell\",\"doc\":\"Text cell in a Notebook, which will present content in text format\",\"fields\":[{\"name\":\"cellTitle\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Title of the cell\",\"default\":null},{\"name\":\"cellId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique id for the cell. This id should be globally unique for a Notebook tool even when there are multiple deployments of it. As an example, Notebook URL could be used here for QueryBook such as 'querybook.com/notebook/773/?cellId=1234'\"},{\"name\":\"changeAuditStamps\",\"type\":{\"type\":\"record\",\"name\":\"ChangeAuditStamps\",\"namespace\":\"com.linkedin.pegasus2avro.common\",\"doc\":\"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into various lifecycle stages, and who acted to move it into those lifecycle stages. The recommended best practice is to include this record in your record schema, and annotate its fields as @readOnly in your resource. See https://github.com/linkedin/rest.li/wiki/Validation-in-Rest.li#restli-validation-annotations\",\"fields\":[{\"name\":\"created\",\"type\":{\"type\":\"record\",\"name\":\"AuditStamp\",\"doc\":\"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.\",\"fields\":[{\"name\":\"time\",\"type\":\"long\",\"doc\":\"When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent.\"},{\"name\":\"actor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change.\",\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"impersonator\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.\",\"default\":null,\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually.\",\"default\":null}]},\"doc\":\"An AuditStamp corresponding to the creation of this resource/association/sub-resource. A value of 0 for time indicates missing data.\",\"default\":{\"actor\":\"urn:li:corpuser:unknown\",\"impersonator\":null,\"time\":0,\"message\":null}},{\"name\":\"lastModified\",\"type\":\"AuditStamp\",\"doc\":\"An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created. A value of 0 for time indicates missing data.\",\"default\":{\"actor\":\"urn:li:corpuser:unknown\",\"impersonator\":null,\"time\":0,\"message\":null}},{\"name\":\"deleted\",\"type\":[\"null\",\"AuditStamp\"],\"doc\":\"An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.\",\"default\":null}]},\"doc\":\"Captures information about who created/last modified/deleted this Notebook cell and when\"},{\"name\":\"text\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The actual text in a TextCell in a Notebook\"}]}],\"doc\":\"The text cell content. The will be non-null only when all other cell field is null.\",\"default\":null},{\"name\":\"queryCell\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"QueryCell\",\"doc\":\"Query cell in a Notebook, which will present content in query format\",\"fields\":[{\"name\":\"cellTitle\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Title of the cell\",\"default\":null},{\"name\":\"cellId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique id for the cell. This id should be globally unique for a Notebook tool even when there are multiple deployments of it. As an example, Notebook URL could be used here for QueryBook such as 'querybook.com/notebook/773/?cellId=1234'\"},{\"name\":\"changeAuditStamps\",\"type\":\"com.linkedin.pegasus2avro.common.ChangeAuditStamps\",\"doc\":\"Captures information about who created/last modified/deleted this Notebook cell and when\"},{\"name\":\"rawQuery\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Raw query to explain some specific logic in a Notebook\"},{\"name\":\"lastExecuted\",\"type\":[\"null\",\"com.linkedin.pegasus2avro.common.AuditStamp\"],\"doc\":\"Captures information about who last executed this query cell and when\",\"default\":null}]}],\"doc\":\"The query cell content. The will be non-null only when all other cell field is null.\",\"default\":null},{\"name\":\"chartCell\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ChartCell\",\"doc\":\"Chart cell in a notebook, which will present content in chart format\",\"fields\":[{\"name\":\"cellTitle\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Title of the cell\",\"default\":null},{\"name\":\"cellId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique id for the cell. This id should be globally unique for a Notebook tool even when there are multiple deployments of it. As an example, Notebook URL could be used here for QueryBook such as 'querybook.com/notebook/773/?cellId=1234'\"},{\"name\":\"changeAuditStamps\",\"type\":\"com.linkedin.pegasus2avro.common.ChangeAuditStamps\",\"doc\":\"Captures information about who created/last modified/deleted this Notebook cell and when\"}]}],\"doc\":\"The chart cell content. The will be non-null only when all other cell field is null.\",\"default\":null},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"NotebookCellType\",\"doc\":\"Type of Notebook Cell\",\"symbols\":[\"TEXT_CELL\",\"QUERY_CELL\",\"CHART_CELL\"],\"symbolDocs\":{\"CHART_CELL\":\"CHART Notebook cell type. The cell content is chart only.\",\"QUERY_CELL\":\"QUERY Notebook cell type. The cell context is query only.\",\"TEXT_CELL\":\"TEXT Notebook cell type. The cell context is text only.\"}},\"doc\":\"The type of this Notebook cell\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The text cell content. The will be non-null only when all other cell field is null. */
  @Deprecated public com.linkedin.pegasus2avro.notebook.TextCell textCell;
  /** The query cell content. The will be non-null only when all other cell field is null. */
  @Deprecated public com.linkedin.pegasus2avro.notebook.QueryCell queryCell;
  /** The chart cell content. The will be non-null only when all other cell field is null. */
  @Deprecated public com.linkedin.pegasus2avro.notebook.ChartCell chartCell;
  /** The type of this Notebook cell */
  @Deprecated public com.linkedin.pegasus2avro.notebook.NotebookCellType type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public NotebookCell() {}

  /**
   * All-args constructor.
   */
  public NotebookCell(com.linkedin.pegasus2avro.notebook.TextCell textCell, com.linkedin.pegasus2avro.notebook.QueryCell queryCell, com.linkedin.pegasus2avro.notebook.ChartCell chartCell, com.linkedin.pegasus2avro.notebook.NotebookCellType type) {
    this.textCell = textCell;
    this.queryCell = queryCell;
    this.chartCell = chartCell;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return textCell;
    case 1: return queryCell;
    case 2: return chartCell;
    case 3: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: textCell = (com.linkedin.pegasus2avro.notebook.TextCell)value$; break;
    case 1: queryCell = (com.linkedin.pegasus2avro.notebook.QueryCell)value$; break;
    case 2: chartCell = (com.linkedin.pegasus2avro.notebook.ChartCell)value$; break;
    case 3: type = (com.linkedin.pegasus2avro.notebook.NotebookCellType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'textCell' field.
   * The text cell content. The will be non-null only when all other cell field is null.   */
  public com.linkedin.pegasus2avro.notebook.TextCell getTextCell() {
    return textCell;
  }

  /**
   * Sets the value of the 'textCell' field.
   * The text cell content. The will be non-null only when all other cell field is null.   * @param value the value to set.
   */
  public void setTextCell(com.linkedin.pegasus2avro.notebook.TextCell value) {
    this.textCell = value;
  }

  /**
   * Gets the value of the 'queryCell' field.
   * The query cell content. The will be non-null only when all other cell field is null.   */
  public com.linkedin.pegasus2avro.notebook.QueryCell getQueryCell() {
    return queryCell;
  }

  /**
   * Sets the value of the 'queryCell' field.
   * The query cell content. The will be non-null only when all other cell field is null.   * @param value the value to set.
   */
  public void setQueryCell(com.linkedin.pegasus2avro.notebook.QueryCell value) {
    this.queryCell = value;
  }

  /**
   * Gets the value of the 'chartCell' field.
   * The chart cell content. The will be non-null only when all other cell field is null.   */
  public com.linkedin.pegasus2avro.notebook.ChartCell getChartCell() {
    return chartCell;
  }

  /**
   * Sets the value of the 'chartCell' field.
   * The chart cell content. The will be non-null only when all other cell field is null.   * @param value the value to set.
   */
  public void setChartCell(com.linkedin.pegasus2avro.notebook.ChartCell value) {
    this.chartCell = value;
  }

  /**
   * Gets the value of the 'type' field.
   * The type of this Notebook cell   */
  public com.linkedin.pegasus2avro.notebook.NotebookCellType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of this Notebook cell   * @param value the value to set.
   */
  public void setType(com.linkedin.pegasus2avro.notebook.NotebookCellType value) {
    this.type = value;
  }

  /** Creates a new NotebookCell RecordBuilder */
  public static com.linkedin.pegasus2avro.notebook.NotebookCell.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.notebook.NotebookCell.Builder();
  }
  
  /** Creates a new NotebookCell RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.notebook.NotebookCell.Builder newBuilder(com.linkedin.pegasus2avro.notebook.NotebookCell.Builder other) {
    return new com.linkedin.pegasus2avro.notebook.NotebookCell.Builder(other);
  }
  
  /** Creates a new NotebookCell RecordBuilder by copying an existing NotebookCell instance */
  public static com.linkedin.pegasus2avro.notebook.NotebookCell.Builder newBuilder(com.linkedin.pegasus2avro.notebook.NotebookCell other) {
    return new com.linkedin.pegasus2avro.notebook.NotebookCell.Builder(other);
  }
  
  /**
   * RecordBuilder for NotebookCell instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NotebookCell>
    implements org.apache.avro.data.RecordBuilder<NotebookCell> {

    private com.linkedin.pegasus2avro.notebook.TextCell textCell;
    private com.linkedin.pegasus2avro.notebook.QueryCell queryCell;
    private com.linkedin.pegasus2avro.notebook.ChartCell chartCell;
    private com.linkedin.pegasus2avro.notebook.NotebookCellType type;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.notebook.NotebookCell.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.notebook.NotebookCell.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.textCell)) {
        this.textCell = data().deepCopy(fields()[0].schema(), other.textCell);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.queryCell)) {
        this.queryCell = data().deepCopy(fields()[1].schema(), other.queryCell);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chartCell)) {
        this.chartCell = data().deepCopy(fields()[2].schema(), other.chartCell);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing NotebookCell instance */
    private Builder(com.linkedin.pegasus2avro.notebook.NotebookCell other) {
            super(com.linkedin.pegasus2avro.notebook.NotebookCell.SCHEMA$);
      if (isValidValue(fields()[0], other.textCell)) {
        this.textCell = data().deepCopy(fields()[0].schema(), other.textCell);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.queryCell)) {
        this.queryCell = data().deepCopy(fields()[1].schema(), other.queryCell);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chartCell)) {
        this.chartCell = data().deepCopy(fields()[2].schema(), other.chartCell);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'textCell' field */
    public com.linkedin.pegasus2avro.notebook.TextCell getTextCell() {
      return textCell;
    }
    
    /** Sets the value of the 'textCell' field */
    public com.linkedin.pegasus2avro.notebook.NotebookCell.Builder setTextCell(com.linkedin.pegasus2avro.notebook.TextCell value) {
      validate(fields()[0], value);
      this.textCell = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'textCell' field has been set */
    public boolean hasTextCell() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'textCell' field */
    public com.linkedin.pegasus2avro.notebook.NotebookCell.Builder clearTextCell() {
      textCell = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'queryCell' field */
    public com.linkedin.pegasus2avro.notebook.QueryCell getQueryCell() {
      return queryCell;
    }
    
    /** Sets the value of the 'queryCell' field */
    public com.linkedin.pegasus2avro.notebook.NotebookCell.Builder setQueryCell(com.linkedin.pegasus2avro.notebook.QueryCell value) {
      validate(fields()[1], value);
      this.queryCell = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'queryCell' field has been set */
    public boolean hasQueryCell() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'queryCell' field */
    public com.linkedin.pegasus2avro.notebook.NotebookCell.Builder clearQueryCell() {
      queryCell = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'chartCell' field */
    public com.linkedin.pegasus2avro.notebook.ChartCell getChartCell() {
      return chartCell;
    }
    
    /** Sets the value of the 'chartCell' field */
    public com.linkedin.pegasus2avro.notebook.NotebookCell.Builder setChartCell(com.linkedin.pegasus2avro.notebook.ChartCell value) {
      validate(fields()[2], value);
      this.chartCell = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'chartCell' field has been set */
    public boolean hasChartCell() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'chartCell' field */
    public com.linkedin.pegasus2avro.notebook.NotebookCell.Builder clearChartCell() {
      chartCell = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public com.linkedin.pegasus2avro.notebook.NotebookCellType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.linkedin.pegasus2avro.notebook.NotebookCell.Builder setType(com.linkedin.pegasus2avro.notebook.NotebookCellType value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'type' field */
    public com.linkedin.pegasus2avro.notebook.NotebookCell.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public NotebookCell build() {
      try {
        NotebookCell record = new NotebookCell();
        record.textCell = fieldSetFlags()[0] ? this.textCell : (com.linkedin.pegasus2avro.notebook.TextCell) defaultValue(fields()[0]);
        record.queryCell = fieldSetFlags()[1] ? this.queryCell : (com.linkedin.pegasus2avro.notebook.QueryCell) defaultValue(fields()[1]);
        record.chartCell = fieldSetFlags()[2] ? this.chartCell : (com.linkedin.pegasus2avro.notebook.ChartCell) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (com.linkedin.pegasus2avro.notebook.NotebookCellType) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
