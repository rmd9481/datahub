/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.glossary;  
@SuppressWarnings("all")
/** Properties associated with a GlossaryNode */
@org.apache.avro.specific.AvroGenerated
public class GlossaryNodeInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GlossaryNodeInfo\",\"namespace\":\"com.linkedin.pegasus2avro.glossary\",\"doc\":\"Properties associated with a GlossaryNode\",\"fields\":[{\"name\":\"definition\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Definition of business node\",\"Searchable\":{}},{\"name\":\"parentNode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Parent node of the glossary term\",\"default\":null,\"Relationship\":{\"entityTypes\":[\"glossaryNode\"],\"name\":\"IsPartOf\"},\"Searchable\":{\"fieldName\":\"parentNode\",\"fieldType\":\"URN\",\"hasValuesFieldName\":\"hasParentNode\"},\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.GlossaryNodeUrn\"}},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Display name of the node\",\"default\":null,\"Searchable\":{\"boostScore\":10.0,\"enableAutocomplete\":true,\"fieldName\":\"displayName\",\"fieldNameAliases\":[\"_entityName\"],\"fieldType\":\"WORD_GRAM\"}},{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Optional id for the GlossaryNode\",\"default\":null,\"Searchable\":{\"fieldType\":\"TEXT_PARTIAL\"}}],\"Aspect\":{\"name\":\"glossaryNodeInfo\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Definition of business node */
  @Deprecated public java.lang.String definition;
  /** Parent node of the glossary term */
  @Deprecated public java.lang.String parentNode;
  /** Display name of the node */
  @Deprecated public java.lang.String name;
  /** Optional id for the GlossaryNode */
  @Deprecated public java.lang.String id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GlossaryNodeInfo() {}

  /**
   * All-args constructor.
   */
  public GlossaryNodeInfo(java.lang.String definition, java.lang.String parentNode, java.lang.String name, java.lang.String id) {
    this.definition = definition;
    this.parentNode = parentNode;
    this.name = name;
    this.id = id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return definition;
    case 1: return parentNode;
    case 2: return name;
    case 3: return id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: definition = (java.lang.String)value$; break;
    case 1: parentNode = (java.lang.String)value$; break;
    case 2: name = (java.lang.String)value$; break;
    case 3: id = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'definition' field.
   * Definition of business node   */
  public java.lang.String getDefinition() {
    return definition;
  }

  /**
   * Sets the value of the 'definition' field.
   * Definition of business node   * @param value the value to set.
   */
  public void setDefinition(java.lang.String value) {
    this.definition = value;
  }

  /**
   * Gets the value of the 'parentNode' field.
   * Parent node of the glossary term   */
  public java.lang.String getParentNode() {
    return parentNode;
  }

  /**
   * Sets the value of the 'parentNode' field.
   * Parent node of the glossary term   * @param value the value to set.
   */
  public void setParentNode(java.lang.String value) {
    this.parentNode = value;
  }

  /**
   * Gets the value of the 'name' field.
   * Display name of the node   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Display name of the node   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'id' field.
   * Optional id for the GlossaryNode   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Optional id for the GlossaryNode   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /** Creates a new GlossaryNodeInfo RecordBuilder */
  public static com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder();
  }
  
  /** Creates a new GlossaryNodeInfo RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder newBuilder(com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder other) {
    return new com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder(other);
  }
  
  /** Creates a new GlossaryNodeInfo RecordBuilder by copying an existing GlossaryNodeInfo instance */
  public static com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder newBuilder(com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo other) {
    return new com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for GlossaryNodeInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GlossaryNodeInfo>
    implements org.apache.avro.data.RecordBuilder<GlossaryNodeInfo> {

    private java.lang.String definition;
    private java.lang.String parentNode;
    private java.lang.String name;
    private java.lang.String id;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.definition)) {
        this.definition = data().deepCopy(fields()[0].schema(), other.definition);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parentNode)) {
        this.parentNode = data().deepCopy(fields()[1].schema(), other.parentNode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GlossaryNodeInfo instance */
    private Builder(com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo other) {
            super(com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.definition)) {
        this.definition = data().deepCopy(fields()[0].schema(), other.definition);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parentNode)) {
        this.parentNode = data().deepCopy(fields()[1].schema(), other.parentNode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'definition' field */
    public java.lang.String getDefinition() {
      return definition;
    }
    
    /** Sets the value of the 'definition' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder setDefinition(java.lang.String value) {
      validate(fields()[0], value);
      this.definition = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'definition' field has been set */
    public boolean hasDefinition() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'definition' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder clearDefinition() {
      definition = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'parentNode' field */
    public java.lang.String getParentNode() {
      return parentNode;
    }
    
    /** Sets the value of the 'parentNode' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder setParentNode(java.lang.String value) {
      validate(fields()[1], value);
      this.parentNode = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'parentNode' field has been set */
    public boolean hasParentNode() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'parentNode' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder clearParentNode() {
      parentNode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder setName(java.lang.String value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'name' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder setId(java.lang.String value) {
      validate(fields()[3], value);
      this.id = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'id' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryNodeInfo.Builder clearId() {
      id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GlossaryNodeInfo build() {
      try {
        GlossaryNodeInfo record = new GlossaryNodeInfo();
        record.definition = fieldSetFlags()[0] ? this.definition : (java.lang.String) defaultValue(fields()[0]);
        record.parentNode = fieldSetFlags()[1] ? this.parentNode : (java.lang.String) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.id = fieldSetFlags()[3] ? this.id : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
