/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.common;  
@SuppressWarnings("all")
/** Ownership information */
@org.apache.avro.specific.AvroGenerated
public class Owner extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Owner\",\"namespace\":\"com.linkedin.pegasus2avro.common\",\"doc\":\"Ownership information\",\"fields\":[{\"name\":\"owner\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\\n(Caveat: only corpuser is currently supported in the frontend.)\",\"Relationship\":{\"entityTypes\":[\"corpuser\",\"corpGroup\"],\"name\":\"OwnedBy\"},\"Searchable\":{\"addToFilters\":true,\"fieldName\":\"owners\",\"fieldType\":\"URN\",\"filterNameOverride\":\"Owned By\",\"hasValuesFieldName\":\"hasOwners\",\"queryByDefault\":false},\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"OwnershipType\",\"doc\":\"Asset owner types\",\"symbols\":[\"CUSTOM\",\"TECHNICAL_OWNER\",\"BUSINESS_OWNER\",\"DATA_STEWARD\",\"NONE\",\"DEVELOPER\",\"DATAOWNER\",\"DELEGATE\",\"PRODUCER\",\"CONSUMER\",\"STAKEHOLDER\"],\"symbolDocs\":{\"BUSINESS_OWNER\":\"A person or group who is responsible for logical, or business related, aspects of the asset.\",\"CONSUMER\":\"A person, group, or service that consumes the data\\nDeprecated! Use TECHNICAL_OWNER or BUSINESS_OWNER instead.\",\"CUSTOM\":\"Set when ownership type is unknown or a when new one is specified as an ownership type entity for which we have no\\nenum value for. This is used for backwards compatibility\",\"DATAOWNER\":\"A person or group that is owning the data\\nDeprecated! Use TECHNICAL_OWNER instead.\",\"DATA_STEWARD\":\"A steward, expert, or delegate responsible for the asset.\",\"DELEGATE\":\"A person or a group that overseas the operation, e.g. a DBA or SRE.\\nDeprecated! Use TECHNICAL_OWNER instead.\",\"DEVELOPER\":\"A person or group that is in charge of developing the code\\nDeprecated! Use TECHNICAL_OWNER instead.\",\"NONE\":\"No specific type associated to the owner.\",\"PRODUCER\":\"A person, group, or service that produces/generates the data\\nDeprecated! Use TECHNICAL_OWNER instead.\",\"STAKEHOLDER\":\"A person or a group that has direct business interest\\nDeprecated! Use TECHNICAL_OWNER, BUSINESS_OWNER, or STEWARD instead.\",\"TECHNICAL_OWNER\":\"person or group who is responsible for technical aspects of the asset.\"},\"deprecatedSymbols\":{\"CONSUMER\":true,\"DATAOWNER\":true,\"DELEGATE\":true,\"DEVELOPER\":true,\"PRODUCER\":true,\"STAKEHOLDER\":true}},\"doc\":\"The type of the ownership\",\"deprecated\":true},{\"name\":\"typeUrn\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The type of the ownership\\nUrn of type O\",\"default\":null,\"Relationship\":{\"entityTypes\":[\"ownershipType\"],\"name\":\"ownershipType\"},\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"OwnershipSource\",\"doc\":\"Source/provider of the ownership information\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"OwnershipSourceType\",\"symbols\":[\"AUDIT\",\"DATABASE\",\"FILE_SYSTEM\",\"ISSUE_TRACKING_SYSTEM\",\"MANUAL\",\"SERVICE\",\"SOURCE_CONTROL\",\"OTHER\"],\"symbolDocs\":{\"AUDIT\":\"Auditing system or audit logs\",\"DATABASE\":\"Database, e.g. GRANTS table\",\"FILE_SYSTEM\":\"File system, e.g. file/directory owner\",\"ISSUE_TRACKING_SYSTEM\":\"Issue tracking system, e.g. Jira\",\"MANUAL\":\"Manually provided by a user\",\"OTHER\":\"Other sources\",\"SERVICE\":\"Other ownership-like service, e.g. Nuage, ACL service etc\",\"SOURCE_CONTROL\":\"SCM system, e.g. GIT, SVN\"}},\"doc\":\"The type of the source\"},{\"name\":\"url\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A reference URL for the source\",\"default\":null}]}],\"doc\":\"Source information for the ownership\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name
(Caveat: only corpuser is currently supported in the frontend.) */
  @Deprecated public java.lang.String owner;
  /** The type of the ownership */
  @Deprecated public com.linkedin.pegasus2avro.common.OwnershipType type;
  /** The type of the ownership
Urn of type O */
  @Deprecated public java.lang.String typeUrn;
  /** Source information for the ownership */
  @Deprecated public com.linkedin.pegasus2avro.common.OwnershipSource source;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Owner() {}

  /**
   * All-args constructor.
   */
  public Owner(java.lang.String owner, com.linkedin.pegasus2avro.common.OwnershipType type, java.lang.String typeUrn, com.linkedin.pegasus2avro.common.OwnershipSource source) {
    this.owner = owner;
    this.type = type;
    this.typeUrn = typeUrn;
    this.source = source;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return owner;
    case 1: return type;
    case 2: return typeUrn;
    case 3: return source;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: owner = (java.lang.String)value$; break;
    case 1: type = (com.linkedin.pegasus2avro.common.OwnershipType)value$; break;
    case 2: typeUrn = (java.lang.String)value$; break;
    case 3: source = (com.linkedin.pegasus2avro.common.OwnershipSource)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'owner' field.
   * Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name
(Caveat: only corpuser is currently supported in the frontend.)   */
  public java.lang.String getOwner() {
    return owner;
  }

  /**
   * Sets the value of the 'owner' field.
   * Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name
(Caveat: only corpuser is currently supported in the frontend.)   * @param value the value to set.
   */
  public void setOwner(java.lang.String value) {
    this.owner = value;
  }

  /**
   * Gets the value of the 'type' field.
   * The type of the ownership   */
  public com.linkedin.pegasus2avro.common.OwnershipType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of the ownership   * @param value the value to set.
   */
  public void setType(com.linkedin.pegasus2avro.common.OwnershipType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'typeUrn' field.
   * The type of the ownership
Urn of type O   */
  public java.lang.String getTypeUrn() {
    return typeUrn;
  }

  /**
   * Sets the value of the 'typeUrn' field.
   * The type of the ownership
Urn of type O   * @param value the value to set.
   */
  public void setTypeUrn(java.lang.String value) {
    this.typeUrn = value;
  }

  /**
   * Gets the value of the 'source' field.
   * Source information for the ownership   */
  public com.linkedin.pegasus2avro.common.OwnershipSource getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * Source information for the ownership   * @param value the value to set.
   */
  public void setSource(com.linkedin.pegasus2avro.common.OwnershipSource value) {
    this.source = value;
  }

  /** Creates a new Owner RecordBuilder */
  public static com.linkedin.pegasus2avro.common.Owner.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.common.Owner.Builder();
  }
  
  /** Creates a new Owner RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.common.Owner.Builder newBuilder(com.linkedin.pegasus2avro.common.Owner.Builder other) {
    return new com.linkedin.pegasus2avro.common.Owner.Builder(other);
  }
  
  /** Creates a new Owner RecordBuilder by copying an existing Owner instance */
  public static com.linkedin.pegasus2avro.common.Owner.Builder newBuilder(com.linkedin.pegasus2avro.common.Owner other) {
    return new com.linkedin.pegasus2avro.common.Owner.Builder(other);
  }
  
  /**
   * RecordBuilder for Owner instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Owner>
    implements org.apache.avro.data.RecordBuilder<Owner> {

    private java.lang.String owner;
    private com.linkedin.pegasus2avro.common.OwnershipType type;
    private java.lang.String typeUrn;
    private com.linkedin.pegasus2avro.common.OwnershipSource source;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.common.Owner.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.common.Owner.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.owner)) {
        this.owner = data().deepCopy(fields()[0].schema(), other.owner);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.typeUrn)) {
        this.typeUrn = data().deepCopy(fields()[2].schema(), other.typeUrn);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Owner instance */
    private Builder(com.linkedin.pegasus2avro.common.Owner other) {
            super(com.linkedin.pegasus2avro.common.Owner.SCHEMA$);
      if (isValidValue(fields()[0], other.owner)) {
        this.owner = data().deepCopy(fields()[0].schema(), other.owner);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.typeUrn)) {
        this.typeUrn = data().deepCopy(fields()[2].schema(), other.typeUrn);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'owner' field */
    public java.lang.String getOwner() {
      return owner;
    }
    
    /** Sets the value of the 'owner' field */
    public com.linkedin.pegasus2avro.common.Owner.Builder setOwner(java.lang.String value) {
      validate(fields()[0], value);
      this.owner = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'owner' field has been set */
    public boolean hasOwner() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'owner' field */
    public com.linkedin.pegasus2avro.common.Owner.Builder clearOwner() {
      owner = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public com.linkedin.pegasus2avro.common.OwnershipType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.linkedin.pegasus2avro.common.Owner.Builder setType(com.linkedin.pegasus2avro.common.OwnershipType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'type' field */
    public com.linkedin.pegasus2avro.common.Owner.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'typeUrn' field */
    public java.lang.String getTypeUrn() {
      return typeUrn;
    }
    
    /** Sets the value of the 'typeUrn' field */
    public com.linkedin.pegasus2avro.common.Owner.Builder setTypeUrn(java.lang.String value) {
      validate(fields()[2], value);
      this.typeUrn = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'typeUrn' field has been set */
    public boolean hasTypeUrn() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'typeUrn' field */
    public com.linkedin.pegasus2avro.common.Owner.Builder clearTypeUrn() {
      typeUrn = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'source' field */
    public com.linkedin.pegasus2avro.common.OwnershipSource getSource() {
      return source;
    }
    
    /** Sets the value of the 'source' field */
    public com.linkedin.pegasus2avro.common.Owner.Builder setSource(com.linkedin.pegasus2avro.common.OwnershipSource value) {
      validate(fields()[3], value);
      this.source = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'source' field has been set */
    public boolean hasSource() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'source' field */
    public com.linkedin.pegasus2avro.common.Owner.Builder clearSource() {
      source = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Owner build() {
      try {
        Owner record = new Owner();
        record.owner = fieldSetFlags()[0] ? this.owner : (java.lang.String) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (com.linkedin.pegasus2avro.common.OwnershipType) defaultValue(fields()[1]);
        record.typeUrn = fieldSetFlags()[2] ? this.typeUrn : (java.lang.String) defaultValue(fields()[2]);
        record.source = fieldSetFlags()[3] ? this.source : (com.linkedin.pegasus2avro.common.OwnershipSource) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
