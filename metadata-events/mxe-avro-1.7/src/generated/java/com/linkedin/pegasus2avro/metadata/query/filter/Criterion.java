/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.query.filter;  
@SuppressWarnings("all")
/** A criterion for matching a field with given value */
@org.apache.avro.specific.AvroGenerated
public class Criterion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Criterion\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.query.filter\",\"doc\":\"A criterion for matching a field with given value\",\"fields\":[{\"name\":\"field\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the field that the criterion refers to\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The value of the intended field\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"Values. one of which the intended field should match\\nNote, if values is set, the above \\\"value\\\" field will be ignored\",\"default\":[]},{\"name\":\"condition\",\"type\":{\"type\":\"enum\",\"name\":\"Condition\",\"doc\":\"The matching condition in a filter criterion\",\"symbols\":[\"CONTAIN\",\"END_WITH\",\"EQUAL\",\"IS_NULL\",\"EXISTS\",\"GREATER_THAN\",\"GREATER_THAN_OR_EQUAL_TO\",\"IN\",\"LESS_THAN\",\"LESS_THAN_OR_EQUAL_TO\",\"START_WITH\"],\"symbolDocs\":{\"CONTAIN\":\"Represent the relation: String field contains value, e.g. name contains Profile\",\"END_WITH\":\"Represent the relation: String field ends with value, e.g. name ends with Event\",\"EQUAL\":\"Represent the relation: field = value, e.g. platform = hdfs\",\"EXISTS\":\"Represents the relation: field exists and is non-empty, e.g. owners is not null and != [] (empty)\",\"GREATER_THAN\":\"Represent the relation greater than, e.g. ownerCount > 5\",\"GREATER_THAN_OR_EQUAL_TO\":\"Represent the relation greater than or equal to, e.g. ownerCount >= 5\",\"IN\":\"Represent the relation: String field is one of the array values to, e.g. name in [\\\"Profile\\\", \\\"Event\\\"]\",\"IS_NULL\":\"Represent the relation: field is null, e.g. platform is null\",\"LESS_THAN\":\"Represent the relation less than, e.g. ownerCount < 3\",\"LESS_THAN_OR_EQUAL_TO\":\"Represent the relation less than or equal to, e.g. ownerCount <= 3\",\"START_WITH\":\"Represent the relation: String field starts with value, e.g. name starts with PageView\"}},\"doc\":\"The condition for the criterion, e.g. EQUAL, START_WITH\",\"default\":\"EQUAL\"},{\"name\":\"negated\",\"type\":\"boolean\",\"doc\":\"Whether the condition should be negated\",\"default\":false}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The name of the field that the criterion refers to */
  @Deprecated public java.lang.String field;
  /** The value of the intended field */
  @Deprecated public java.lang.String value;
  /** Values. one of which the intended field should match
Note, if values is set, the above "value" field will be ignored */
  @Deprecated public java.util.List<java.lang.String> values;
  /** The condition for the criterion, e.g. EQUAL, START_WITH */
  @Deprecated public com.linkedin.pegasus2avro.metadata.query.filter.Condition condition;
  /** Whether the condition should be negated */
  @Deprecated public boolean negated;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Criterion() {}

  /**
   * All-args constructor.
   */
  public Criterion(java.lang.String field, java.lang.String value, java.util.List<java.lang.String> values, com.linkedin.pegasus2avro.metadata.query.filter.Condition condition, java.lang.Boolean negated) {
    this.field = field;
    this.value = value;
    this.values = values;
    this.condition = condition;
    this.negated = negated;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return field;
    case 1: return value;
    case 2: return values;
    case 3: return condition;
    case 4: return negated;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: field = (java.lang.String)value$; break;
    case 1: value = (java.lang.String)value$; break;
    case 2: values = (java.util.List<java.lang.String>)value$; break;
    case 3: condition = (com.linkedin.pegasus2avro.metadata.query.filter.Condition)value$; break;
    case 4: negated = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'field' field.
   * The name of the field that the criterion refers to   */
  public java.lang.String getField() {
    return field;
  }

  /**
   * Sets the value of the 'field' field.
   * The name of the field that the criterion refers to   * @param value the value to set.
   */
  public void setField(java.lang.String value) {
    this.field = value;
  }

  /**
   * Gets the value of the 'value' field.
   * The value of the intended field   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * The value of the intended field   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'values' field.
   * Values. one of which the intended field should match
Note, if values is set, the above "value" field will be ignored   */
  public java.util.List<java.lang.String> getValues() {
    return values;
  }

  /**
   * Sets the value of the 'values' field.
   * Values. one of which the intended field should match
Note, if values is set, the above "value" field will be ignored   * @param value the value to set.
   */
  public void setValues(java.util.List<java.lang.String> value) {
    this.values = value;
  }

  /**
   * Gets the value of the 'condition' field.
   * The condition for the criterion, e.g. EQUAL, START_WITH   */
  public com.linkedin.pegasus2avro.metadata.query.filter.Condition getCondition() {
    return condition;
  }

  /**
   * Sets the value of the 'condition' field.
   * The condition for the criterion, e.g. EQUAL, START_WITH   * @param value the value to set.
   */
  public void setCondition(com.linkedin.pegasus2avro.metadata.query.filter.Condition value) {
    this.condition = value;
  }

  /**
   * Gets the value of the 'negated' field.
   * Whether the condition should be negated   */
  public java.lang.Boolean getNegated() {
    return negated;
  }

  /**
   * Sets the value of the 'negated' field.
   * Whether the condition should be negated   * @param value the value to set.
   */
  public void setNegated(java.lang.Boolean value) {
    this.negated = value;
  }

  /** Creates a new Criterion RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder();
  }
  
  /** Creates a new Criterion RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder newBuilder(com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder(other);
  }
  
  /** Creates a new Criterion RecordBuilder by copying an existing Criterion instance */
  public static com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder newBuilder(com.linkedin.pegasus2avro.metadata.query.filter.Criterion other) {
    return new com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder(other);
  }
  
  /**
   * RecordBuilder for Criterion instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Criterion>
    implements org.apache.avro.data.RecordBuilder<Criterion> {

    private java.lang.String field;
    private java.lang.String value;
    private java.util.List<java.lang.String> values;
    private com.linkedin.pegasus2avro.metadata.query.filter.Condition condition;
    private boolean negated;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.query.filter.Criterion.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.field)) {
        this.field = data().deepCopy(fields()[0].schema(), other.field);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.values)) {
        this.values = data().deepCopy(fields()[2].schema(), other.values);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.condition)) {
        this.condition = data().deepCopy(fields()[3].schema(), other.condition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.negated)) {
        this.negated = data().deepCopy(fields()[4].schema(), other.negated);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Criterion instance */
    private Builder(com.linkedin.pegasus2avro.metadata.query.filter.Criterion other) {
            super(com.linkedin.pegasus2avro.metadata.query.filter.Criterion.SCHEMA$);
      if (isValidValue(fields()[0], other.field)) {
        this.field = data().deepCopy(fields()[0].schema(), other.field);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.values)) {
        this.values = data().deepCopy(fields()[2].schema(), other.values);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.condition)) {
        this.condition = data().deepCopy(fields()[3].schema(), other.condition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.negated)) {
        this.negated = data().deepCopy(fields()[4].schema(), other.negated);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'field' field */
    public java.lang.String getField() {
      return field;
    }
    
    /** Sets the value of the 'field' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder setField(java.lang.String value) {
      validate(fields()[0], value);
      this.field = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'field' field has been set */
    public boolean hasField() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'field' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder clearField() {
      field = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'value' field */
    public java.lang.String getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder setValue(java.lang.String value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'value' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'values' field */
    public java.util.List<java.lang.String> getValues() {
      return values;
    }
    
    /** Sets the value of the 'values' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder setValues(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.values = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'values' field has been set */
    public boolean hasValues() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'values' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder clearValues() {
      values = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'condition' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Condition getCondition() {
      return condition;
    }
    
    /** Sets the value of the 'condition' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder setCondition(com.linkedin.pegasus2avro.metadata.query.filter.Condition value) {
      validate(fields()[3], value);
      this.condition = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'condition' field has been set */
    public boolean hasCondition() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'condition' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder clearCondition() {
      condition = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'negated' field */
    public java.lang.Boolean getNegated() {
      return negated;
    }
    
    /** Sets the value of the 'negated' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder setNegated(boolean value) {
      validate(fields()[4], value);
      this.negated = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'negated' field has been set */
    public boolean hasNegated() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'negated' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Criterion.Builder clearNegated() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Criterion build() {
      try {
        Criterion record = new Criterion();
        record.field = fieldSetFlags()[0] ? this.field : (java.lang.String) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.String) defaultValue(fields()[1]);
        record.values = fieldSetFlags()[2] ? this.values : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.condition = fieldSetFlags()[3] ? this.condition : (com.linkedin.pegasus2avro.metadata.query.filter.Condition) defaultValue(fields()[3]);
        record.negated = fieldSetFlags()[4] ? this.negated : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
