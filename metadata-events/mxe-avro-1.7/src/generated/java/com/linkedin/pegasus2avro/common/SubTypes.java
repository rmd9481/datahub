/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.common;  
@SuppressWarnings("all")
/** Sub Types. Use this aspect to specialize a generic Entity
e.g. Making a Dataset also be a View or also be a LookerExplore */
@org.apache.avro.specific.AvroGenerated
public class SubTypes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SubTypes\",\"namespace\":\"com.linkedin.pegasus2avro.common\",\"doc\":\"Sub Types. Use this aspect to specialize a generic Entity\\ne.g. Making a Dataset also be a View or also be a LookerExplore\",\"fields\":[{\"name\":\"typeNames\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"The names of the specific types.\",\"Searchable\":{\"/*\":{\"addToFilters\":true,\"fieldType\":\"KEYWORD\",\"filterNameOverride\":\"Sub Type\",\"queryByDefault\":true}}}],\"Aspect\":{\"name\":\"subTypes\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The names of the specific types. */
  @Deprecated public java.util.List<java.lang.String> typeNames;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SubTypes() {}

  /**
   * All-args constructor.
   */
  public SubTypes(java.util.List<java.lang.String> typeNames) {
    this.typeNames = typeNames;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return typeNames;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: typeNames = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'typeNames' field.
   * The names of the specific types.   */
  public java.util.List<java.lang.String> getTypeNames() {
    return typeNames;
  }

  /**
   * Sets the value of the 'typeNames' field.
   * The names of the specific types.   * @param value the value to set.
   */
  public void setTypeNames(java.util.List<java.lang.String> value) {
    this.typeNames = value;
  }

  /** Creates a new SubTypes RecordBuilder */
  public static com.linkedin.pegasus2avro.common.SubTypes.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.common.SubTypes.Builder();
  }
  
  /** Creates a new SubTypes RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.common.SubTypes.Builder newBuilder(com.linkedin.pegasus2avro.common.SubTypes.Builder other) {
    return new com.linkedin.pegasus2avro.common.SubTypes.Builder(other);
  }
  
  /** Creates a new SubTypes RecordBuilder by copying an existing SubTypes instance */
  public static com.linkedin.pegasus2avro.common.SubTypes.Builder newBuilder(com.linkedin.pegasus2avro.common.SubTypes other) {
    return new com.linkedin.pegasus2avro.common.SubTypes.Builder(other);
  }
  
  /**
   * RecordBuilder for SubTypes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SubTypes>
    implements org.apache.avro.data.RecordBuilder<SubTypes> {

    private java.util.List<java.lang.String> typeNames;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.common.SubTypes.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.common.SubTypes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.typeNames)) {
        this.typeNames = data().deepCopy(fields()[0].schema(), other.typeNames);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SubTypes instance */
    private Builder(com.linkedin.pegasus2avro.common.SubTypes other) {
            super(com.linkedin.pegasus2avro.common.SubTypes.SCHEMA$);
      if (isValidValue(fields()[0], other.typeNames)) {
        this.typeNames = data().deepCopy(fields()[0].schema(), other.typeNames);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'typeNames' field */
    public java.util.List<java.lang.String> getTypeNames() {
      return typeNames;
    }
    
    /** Sets the value of the 'typeNames' field */
    public com.linkedin.pegasus2avro.common.SubTypes.Builder setTypeNames(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.typeNames = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'typeNames' field has been set */
    public boolean hasTypeNames() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'typeNames' field */
    public com.linkedin.pegasus2avro.common.SubTypes.Builder clearTypeNames() {
      typeNames = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public SubTypes build() {
      try {
        SubTypes record = new SubTypes();
        record.typeNames = fieldSetFlags()[0] ? this.typeNames : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
