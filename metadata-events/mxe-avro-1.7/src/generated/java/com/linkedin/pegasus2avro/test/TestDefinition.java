/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.test;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestDefinition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestDefinition\",\"namespace\":\"com.linkedin.pegasus2avro.test\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TestDefinitionType\",\"symbols\":[\"JSON\"],\"symbolDocs\":{\"JSON\":\"JSON / YAML test def\"}},\"doc\":\"The Test Definition Type\"},{\"name\":\"json\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"JSON format configuration for the test\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The Test Definition Type */
  @Deprecated public com.linkedin.pegasus2avro.test.TestDefinitionType type;
  /** JSON format configuration for the test */
  @Deprecated public java.lang.String json;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TestDefinition() {}

  /**
   * All-args constructor.
   */
  public TestDefinition(com.linkedin.pegasus2avro.test.TestDefinitionType type, java.lang.String json) {
    this.type = type;
    this.json = json;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return json;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (com.linkedin.pegasus2avro.test.TestDefinitionType)value$; break;
    case 1: json = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * The Test Definition Type   */
  public com.linkedin.pegasus2avro.test.TestDefinitionType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The Test Definition Type   * @param value the value to set.
   */
  public void setType(com.linkedin.pegasus2avro.test.TestDefinitionType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'json' field.
   * JSON format configuration for the test   */
  public java.lang.String getJson() {
    return json;
  }

  /**
   * Sets the value of the 'json' field.
   * JSON format configuration for the test   * @param value the value to set.
   */
  public void setJson(java.lang.String value) {
    this.json = value;
  }

  /** Creates a new TestDefinition RecordBuilder */
  public static com.linkedin.pegasus2avro.test.TestDefinition.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.test.TestDefinition.Builder();
  }
  
  /** Creates a new TestDefinition RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.test.TestDefinition.Builder newBuilder(com.linkedin.pegasus2avro.test.TestDefinition.Builder other) {
    return new com.linkedin.pegasus2avro.test.TestDefinition.Builder(other);
  }
  
  /** Creates a new TestDefinition RecordBuilder by copying an existing TestDefinition instance */
  public static com.linkedin.pegasus2avro.test.TestDefinition.Builder newBuilder(com.linkedin.pegasus2avro.test.TestDefinition other) {
    return new com.linkedin.pegasus2avro.test.TestDefinition.Builder(other);
  }
  
  /**
   * RecordBuilder for TestDefinition instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestDefinition>
    implements org.apache.avro.data.RecordBuilder<TestDefinition> {

    private com.linkedin.pegasus2avro.test.TestDefinitionType type;
    private java.lang.String json;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.test.TestDefinition.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.test.TestDefinition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.json)) {
        this.json = data().deepCopy(fields()[1].schema(), other.json);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TestDefinition instance */
    private Builder(com.linkedin.pegasus2avro.test.TestDefinition other) {
            super(com.linkedin.pegasus2avro.test.TestDefinition.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.json)) {
        this.json = data().deepCopy(fields()[1].schema(), other.json);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public com.linkedin.pegasus2avro.test.TestDefinitionType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.linkedin.pegasus2avro.test.TestDefinition.Builder setType(com.linkedin.pegasus2avro.test.TestDefinitionType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public com.linkedin.pegasus2avro.test.TestDefinition.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'json' field */
    public java.lang.String getJson() {
      return json;
    }
    
    /** Sets the value of the 'json' field */
    public com.linkedin.pegasus2avro.test.TestDefinition.Builder setJson(java.lang.String value) {
      validate(fields()[1], value);
      this.json = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'json' field has been set */
    public boolean hasJson() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'json' field */
    public com.linkedin.pegasus2avro.test.TestDefinition.Builder clearJson() {
      json = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TestDefinition build() {
      try {
        TestDefinition record = new TestDefinition();
        record.type = fieldSetFlags()[0] ? this.type : (com.linkedin.pegasus2avro.test.TestDefinitionType) defaultValue(fields()[0]);
        record.json = fieldSetFlags()[1] ? this.json : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
