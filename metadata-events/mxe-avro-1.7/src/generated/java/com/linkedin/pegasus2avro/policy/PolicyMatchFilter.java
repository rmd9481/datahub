/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.policy;  
@SuppressWarnings("all")
/** The filter for specifying the resource or actor to apply privileges to */
@org.apache.avro.specific.AvroGenerated
public class PolicyMatchFilter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PolicyMatchFilter\",\"namespace\":\"com.linkedin.pegasus2avro.policy\",\"doc\":\"The filter for specifying the resource or actor to apply privileges to\",\"fields\":[{\"name\":\"criteria\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PolicyMatchCriterion\",\"doc\":\"A criterion for matching a field with given value\",\"fields\":[{\"name\":\"field\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the field that the criterion refers to\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"Values. Matches criterion if any one of the values matches condition (OR-relationship)\"},{\"name\":\"condition\",\"type\":{\"type\":\"enum\",\"name\":\"PolicyMatchCondition\",\"doc\":\"The matching condition in a filter criterion\",\"symbols\":[\"EQUALS\"],\"symbolDocs\":{\"EQUALS\":\"Whether the field matches the value\"}},\"doc\":\"The condition for the criterion\",\"default\":\"EQUALS\"}]}},\"doc\":\"A list of criteria to apply conjunctively (so all criteria must pass)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A list of criteria to apply conjunctively (so all criteria must pass) */
  @Deprecated public java.util.List<com.linkedin.pegasus2avro.policy.PolicyMatchCriterion> criteria;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PolicyMatchFilter() {}

  /**
   * All-args constructor.
   */
  public PolicyMatchFilter(java.util.List<com.linkedin.pegasus2avro.policy.PolicyMatchCriterion> criteria) {
    this.criteria = criteria;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return criteria;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: criteria = (java.util.List<com.linkedin.pegasus2avro.policy.PolicyMatchCriterion>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'criteria' field.
   * A list of criteria to apply conjunctively (so all criteria must pass)   */
  public java.util.List<com.linkedin.pegasus2avro.policy.PolicyMatchCriterion> getCriteria() {
    return criteria;
  }

  /**
   * Sets the value of the 'criteria' field.
   * A list of criteria to apply conjunctively (so all criteria must pass)   * @param value the value to set.
   */
  public void setCriteria(java.util.List<com.linkedin.pegasus2avro.policy.PolicyMatchCriterion> value) {
    this.criteria = value;
  }

  /** Creates a new PolicyMatchFilter RecordBuilder */
  public static com.linkedin.pegasus2avro.policy.PolicyMatchFilter.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.policy.PolicyMatchFilter.Builder();
  }
  
  /** Creates a new PolicyMatchFilter RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.policy.PolicyMatchFilter.Builder newBuilder(com.linkedin.pegasus2avro.policy.PolicyMatchFilter.Builder other) {
    return new com.linkedin.pegasus2avro.policy.PolicyMatchFilter.Builder(other);
  }
  
  /** Creates a new PolicyMatchFilter RecordBuilder by copying an existing PolicyMatchFilter instance */
  public static com.linkedin.pegasus2avro.policy.PolicyMatchFilter.Builder newBuilder(com.linkedin.pegasus2avro.policy.PolicyMatchFilter other) {
    return new com.linkedin.pegasus2avro.policy.PolicyMatchFilter.Builder(other);
  }
  
  /**
   * RecordBuilder for PolicyMatchFilter instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PolicyMatchFilter>
    implements org.apache.avro.data.RecordBuilder<PolicyMatchFilter> {

    private java.util.List<com.linkedin.pegasus2avro.policy.PolicyMatchCriterion> criteria;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.policy.PolicyMatchFilter.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.policy.PolicyMatchFilter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.criteria)) {
        this.criteria = data().deepCopy(fields()[0].schema(), other.criteria);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PolicyMatchFilter instance */
    private Builder(com.linkedin.pegasus2avro.policy.PolicyMatchFilter other) {
            super(com.linkedin.pegasus2avro.policy.PolicyMatchFilter.SCHEMA$);
      if (isValidValue(fields()[0], other.criteria)) {
        this.criteria = data().deepCopy(fields()[0].schema(), other.criteria);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'criteria' field */
    public java.util.List<com.linkedin.pegasus2avro.policy.PolicyMatchCriterion> getCriteria() {
      return criteria;
    }
    
    /** Sets the value of the 'criteria' field */
    public com.linkedin.pegasus2avro.policy.PolicyMatchFilter.Builder setCriteria(java.util.List<com.linkedin.pegasus2avro.policy.PolicyMatchCriterion> value) {
      validate(fields()[0], value);
      this.criteria = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'criteria' field has been set */
    public boolean hasCriteria() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'criteria' field */
    public com.linkedin.pegasus2avro.policy.PolicyMatchFilter.Builder clearCriteria() {
      criteria = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public PolicyMatchFilter build() {
      try {
        PolicyMatchFilter record = new PolicyMatchFilter();
        record.criteria = fieldSetFlags()[0] ? this.criteria : (java.util.List<com.linkedin.pegasus2avro.policy.PolicyMatchCriterion>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
