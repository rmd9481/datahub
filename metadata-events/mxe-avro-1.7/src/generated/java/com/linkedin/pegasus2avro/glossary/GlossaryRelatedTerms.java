/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.glossary;  
@SuppressWarnings("all")
/** Has A / Is A lineage information about a glossary Term reporting the lineage */
@org.apache.avro.specific.AvroGenerated
public class GlossaryRelatedTerms extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GlossaryRelatedTerms\",\"namespace\":\"com.linkedin.pegasus2avro.glossary\",\"doc\":\"Has A / Is A lineage information about a glossary Term reporting the lineage\",\"fields\":[{\"name\":\"isRelatedTerms\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"The relationship Is A with glossary term\",\"default\":null,\"Relationship\":{\"/*\":{\"entityTypes\":[\"glossaryTerm\"],\"name\":\"IsA\"}},\"Searchable\":{\"/*\":{\"boostScore\":2.0,\"fieldName\":\"isRelatedTerms\",\"fieldType\":\"URN\"}}},{\"name\":\"hasRelatedTerms\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"The relationship Has A with glossary term\",\"default\":null,\"Relationship\":{\"/*\":{\"entityTypes\":[\"glossaryTerm\"],\"name\":\"HasA\"}},\"Searchable\":{\"/*\":{\"boostScore\":2.0,\"fieldName\":\"hasRelatedTerms\",\"fieldType\":\"URN\"}}},{\"name\":\"values\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"The relationship Has Value with glossary term.\\nThese are fixed value a term has. For example a ColorEnum where RED, GREEN and YELLOW are fixed values.\",\"default\":null,\"Relationship\":{\"/*\":{\"entityTypes\":[\"glossaryTerm\"],\"name\":\"HasValue\"}},\"Searchable\":{\"/*\":{\"fieldName\":\"values\",\"fieldType\":\"URN\"}}},{\"name\":\"relatedTerms\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"The relationship isRelatedTo with glossary term\",\"default\":null,\"Relationship\":{\"/*\":{\"entityTypes\":[\"glossaryTerm\"],\"name\":\"IsRelatedTo\"}},\"Searchable\":{\"/*\":{\"fieldName\":\"relatedTerms\",\"fieldType\":\"URN\"}}}],\"Aspect\":{\"name\":\"glossaryRelatedTerms\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The relationship Is A with glossary term */
  @Deprecated public java.util.List<java.lang.String> isRelatedTerms;
  /** The relationship Has A with glossary term */
  @Deprecated public java.util.List<java.lang.String> hasRelatedTerms;
  /** The relationship Has Value with glossary term.
These are fixed value a term has. For example a ColorEnum where RED, GREEN and YELLOW are fixed values. */
  @Deprecated public java.util.List<java.lang.String> values;
  /** The relationship isRelatedTo with glossary term */
  @Deprecated public java.util.List<java.lang.String> relatedTerms;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GlossaryRelatedTerms() {}

  /**
   * All-args constructor.
   */
  public GlossaryRelatedTerms(java.util.List<java.lang.String> isRelatedTerms, java.util.List<java.lang.String> hasRelatedTerms, java.util.List<java.lang.String> values, java.util.List<java.lang.String> relatedTerms) {
    this.isRelatedTerms = isRelatedTerms;
    this.hasRelatedTerms = hasRelatedTerms;
    this.values = values;
    this.relatedTerms = relatedTerms;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return isRelatedTerms;
    case 1: return hasRelatedTerms;
    case 2: return values;
    case 3: return relatedTerms;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: isRelatedTerms = (java.util.List<java.lang.String>)value$; break;
    case 1: hasRelatedTerms = (java.util.List<java.lang.String>)value$; break;
    case 2: values = (java.util.List<java.lang.String>)value$; break;
    case 3: relatedTerms = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'isRelatedTerms' field.
   * The relationship Is A with glossary term   */
  public java.util.List<java.lang.String> getIsRelatedTerms() {
    return isRelatedTerms;
  }

  /**
   * Sets the value of the 'isRelatedTerms' field.
   * The relationship Is A with glossary term   * @param value the value to set.
   */
  public void setIsRelatedTerms(java.util.List<java.lang.String> value) {
    this.isRelatedTerms = value;
  }

  /**
   * Gets the value of the 'hasRelatedTerms' field.
   * The relationship Has A with glossary term   */
  public java.util.List<java.lang.String> getHasRelatedTerms() {
    return hasRelatedTerms;
  }

  /**
   * Sets the value of the 'hasRelatedTerms' field.
   * The relationship Has A with glossary term   * @param value the value to set.
   */
  public void setHasRelatedTerms(java.util.List<java.lang.String> value) {
    this.hasRelatedTerms = value;
  }

  /**
   * Gets the value of the 'values' field.
   * The relationship Has Value with glossary term.
These are fixed value a term has. For example a ColorEnum where RED, GREEN and YELLOW are fixed values.   */
  public java.util.List<java.lang.String> getValues() {
    return values;
  }

  /**
   * Sets the value of the 'values' field.
   * The relationship Has Value with glossary term.
These are fixed value a term has. For example a ColorEnum where RED, GREEN and YELLOW are fixed values.   * @param value the value to set.
   */
  public void setValues(java.util.List<java.lang.String> value) {
    this.values = value;
  }

  /**
   * Gets the value of the 'relatedTerms' field.
   * The relationship isRelatedTo with glossary term   */
  public java.util.List<java.lang.String> getRelatedTerms() {
    return relatedTerms;
  }

  /**
   * Sets the value of the 'relatedTerms' field.
   * The relationship isRelatedTo with glossary term   * @param value the value to set.
   */
  public void setRelatedTerms(java.util.List<java.lang.String> value) {
    this.relatedTerms = value;
  }

  /** Creates a new GlossaryRelatedTerms RecordBuilder */
  public static com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder();
  }
  
  /** Creates a new GlossaryRelatedTerms RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder newBuilder(com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder other) {
    return new com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder(other);
  }
  
  /** Creates a new GlossaryRelatedTerms RecordBuilder by copying an existing GlossaryRelatedTerms instance */
  public static com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder newBuilder(com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms other) {
    return new com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder(other);
  }
  
  /**
   * RecordBuilder for GlossaryRelatedTerms instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GlossaryRelatedTerms>
    implements org.apache.avro.data.RecordBuilder<GlossaryRelatedTerms> {

    private java.util.List<java.lang.String> isRelatedTerms;
    private java.util.List<java.lang.String> hasRelatedTerms;
    private java.util.List<java.lang.String> values;
    private java.util.List<java.lang.String> relatedTerms;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.isRelatedTerms)) {
        this.isRelatedTerms = data().deepCopy(fields()[0].schema(), other.isRelatedTerms);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hasRelatedTerms)) {
        this.hasRelatedTerms = data().deepCopy(fields()[1].schema(), other.hasRelatedTerms);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.values)) {
        this.values = data().deepCopy(fields()[2].schema(), other.values);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.relatedTerms)) {
        this.relatedTerms = data().deepCopy(fields()[3].schema(), other.relatedTerms);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GlossaryRelatedTerms instance */
    private Builder(com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms other) {
            super(com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.SCHEMA$);
      if (isValidValue(fields()[0], other.isRelatedTerms)) {
        this.isRelatedTerms = data().deepCopy(fields()[0].schema(), other.isRelatedTerms);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hasRelatedTerms)) {
        this.hasRelatedTerms = data().deepCopy(fields()[1].schema(), other.hasRelatedTerms);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.values)) {
        this.values = data().deepCopy(fields()[2].schema(), other.values);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.relatedTerms)) {
        this.relatedTerms = data().deepCopy(fields()[3].schema(), other.relatedTerms);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'isRelatedTerms' field */
    public java.util.List<java.lang.String> getIsRelatedTerms() {
      return isRelatedTerms;
    }
    
    /** Sets the value of the 'isRelatedTerms' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder setIsRelatedTerms(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.isRelatedTerms = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'isRelatedTerms' field has been set */
    public boolean hasIsRelatedTerms() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'isRelatedTerms' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder clearIsRelatedTerms() {
      isRelatedTerms = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'hasRelatedTerms' field */
    public java.util.List<java.lang.String> getHasRelatedTerms() {
      return hasRelatedTerms;
    }
    
    /** Sets the value of the 'hasRelatedTerms' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder setHasRelatedTerms(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.hasRelatedTerms = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'hasRelatedTerms' field has been set */
    public boolean hasHasRelatedTerms() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'hasRelatedTerms' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder clearHasRelatedTerms() {
      hasRelatedTerms = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'values' field */
    public java.util.List<java.lang.String> getValues() {
      return values;
    }
    
    /** Sets the value of the 'values' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder setValues(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.values = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'values' field has been set */
    public boolean hasValues() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'values' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder clearValues() {
      values = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'relatedTerms' field */
    public java.util.List<java.lang.String> getRelatedTerms() {
      return relatedTerms;
    }
    
    /** Sets the value of the 'relatedTerms' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder setRelatedTerms(java.util.List<java.lang.String> value) {
      validate(fields()[3], value);
      this.relatedTerms = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'relatedTerms' field has been set */
    public boolean hasRelatedTerms() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'relatedTerms' field */
    public com.linkedin.pegasus2avro.glossary.GlossaryRelatedTerms.Builder clearRelatedTerms() {
      relatedTerms = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GlossaryRelatedTerms build() {
      try {
        GlossaryRelatedTerms record = new GlossaryRelatedTerms();
        record.isRelatedTerms = fieldSetFlags()[0] ? this.isRelatedTerms : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.hasRelatedTerms = fieldSetFlags()[1] ? this.hasRelatedTerms : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        record.values = fieldSetFlags()[2] ? this.values : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.relatedTerms = fieldSetFlags()[3] ? this.relatedTerms : (java.util.List<java.lang.String>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
