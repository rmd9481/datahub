/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.identity;  
@SuppressWarnings("all")
/** Corp user credentials */
@org.apache.avro.specific.AvroGenerated
public class CorpUserCredentials extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CorpUserCredentials\",\"namespace\":\"com.linkedin.pegasus2avro.identity\",\"doc\":\"Corp user credentials\",\"fields\":[{\"name\":\"salt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Salt used to hash password\"},{\"name\":\"hashedPassword\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Hashed password generated by concatenating salt and password, then hashing\"},{\"name\":\"passwordResetToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Optional token needed to reset a user's password. Can only be set by the admin.\",\"default\":null},{\"name\":\"passwordResetTokenExpirationTimeMillis\",\"type\":[\"null\",\"long\"],\"doc\":\"When the password reset token expires.\",\"default\":null}],\"Aspect\":{\"EntityUrns\":[\"com.linkedin.pegasus2avro.common.CorpuserUrn\"],\"name\":\"corpUserCredentials\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Salt used to hash password */
  @Deprecated public java.lang.String salt;
  /** Hashed password generated by concatenating salt and password, then hashing */
  @Deprecated public java.lang.String hashedPassword;
  /** Optional token needed to reset a user's password. Can only be set by the admin. */
  @Deprecated public java.lang.String passwordResetToken;
  /** When the password reset token expires. */
  @Deprecated public java.lang.Long passwordResetTokenExpirationTimeMillis;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CorpUserCredentials() {}

  /**
   * All-args constructor.
   */
  public CorpUserCredentials(java.lang.String salt, java.lang.String hashedPassword, java.lang.String passwordResetToken, java.lang.Long passwordResetTokenExpirationTimeMillis) {
    this.salt = salt;
    this.hashedPassword = hashedPassword;
    this.passwordResetToken = passwordResetToken;
    this.passwordResetTokenExpirationTimeMillis = passwordResetTokenExpirationTimeMillis;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return salt;
    case 1: return hashedPassword;
    case 2: return passwordResetToken;
    case 3: return passwordResetTokenExpirationTimeMillis;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: salt = (java.lang.String)value$; break;
    case 1: hashedPassword = (java.lang.String)value$; break;
    case 2: passwordResetToken = (java.lang.String)value$; break;
    case 3: passwordResetTokenExpirationTimeMillis = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'salt' field.
   * Salt used to hash password   */
  public java.lang.String getSalt() {
    return salt;
  }

  /**
   * Sets the value of the 'salt' field.
   * Salt used to hash password   * @param value the value to set.
   */
  public void setSalt(java.lang.String value) {
    this.salt = value;
  }

  /**
   * Gets the value of the 'hashedPassword' field.
   * Hashed password generated by concatenating salt and password, then hashing   */
  public java.lang.String getHashedPassword() {
    return hashedPassword;
  }

  /**
   * Sets the value of the 'hashedPassword' field.
   * Hashed password generated by concatenating salt and password, then hashing   * @param value the value to set.
   */
  public void setHashedPassword(java.lang.String value) {
    this.hashedPassword = value;
  }

  /**
   * Gets the value of the 'passwordResetToken' field.
   * Optional token needed to reset a user's password. Can only be set by the admin.   */
  public java.lang.String getPasswordResetToken() {
    return passwordResetToken;
  }

  /**
   * Sets the value of the 'passwordResetToken' field.
   * Optional token needed to reset a user's password. Can only be set by the admin.   * @param value the value to set.
   */
  public void setPasswordResetToken(java.lang.String value) {
    this.passwordResetToken = value;
  }

  /**
   * Gets the value of the 'passwordResetTokenExpirationTimeMillis' field.
   * When the password reset token expires.   */
  public java.lang.Long getPasswordResetTokenExpirationTimeMillis() {
    return passwordResetTokenExpirationTimeMillis;
  }

  /**
   * Sets the value of the 'passwordResetTokenExpirationTimeMillis' field.
   * When the password reset token expires.   * @param value the value to set.
   */
  public void setPasswordResetTokenExpirationTimeMillis(java.lang.Long value) {
    this.passwordResetTokenExpirationTimeMillis = value;
  }

  /** Creates a new CorpUserCredentials RecordBuilder */
  public static com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder();
  }
  
  /** Creates a new CorpUserCredentials RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder newBuilder(com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder other) {
    return new com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder(other);
  }
  
  /** Creates a new CorpUserCredentials RecordBuilder by copying an existing CorpUserCredentials instance */
  public static com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder newBuilder(com.linkedin.pegasus2avro.identity.CorpUserCredentials other) {
    return new com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder(other);
  }
  
  /**
   * RecordBuilder for CorpUserCredentials instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CorpUserCredentials>
    implements org.apache.avro.data.RecordBuilder<CorpUserCredentials> {

    private java.lang.String salt;
    private java.lang.String hashedPassword;
    private java.lang.String passwordResetToken;
    private java.lang.Long passwordResetTokenExpirationTimeMillis;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.identity.CorpUserCredentials.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.salt)) {
        this.salt = data().deepCopy(fields()[0].schema(), other.salt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hashedPassword)) {
        this.hashedPassword = data().deepCopy(fields()[1].schema(), other.hashedPassword);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.passwordResetToken)) {
        this.passwordResetToken = data().deepCopy(fields()[2].schema(), other.passwordResetToken);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.passwordResetTokenExpirationTimeMillis)) {
        this.passwordResetTokenExpirationTimeMillis = data().deepCopy(fields()[3].schema(), other.passwordResetTokenExpirationTimeMillis);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CorpUserCredentials instance */
    private Builder(com.linkedin.pegasus2avro.identity.CorpUserCredentials other) {
            super(com.linkedin.pegasus2avro.identity.CorpUserCredentials.SCHEMA$);
      if (isValidValue(fields()[0], other.salt)) {
        this.salt = data().deepCopy(fields()[0].schema(), other.salt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hashedPassword)) {
        this.hashedPassword = data().deepCopy(fields()[1].schema(), other.hashedPassword);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.passwordResetToken)) {
        this.passwordResetToken = data().deepCopy(fields()[2].schema(), other.passwordResetToken);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.passwordResetTokenExpirationTimeMillis)) {
        this.passwordResetTokenExpirationTimeMillis = data().deepCopy(fields()[3].schema(), other.passwordResetTokenExpirationTimeMillis);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'salt' field */
    public java.lang.String getSalt() {
      return salt;
    }
    
    /** Sets the value of the 'salt' field */
    public com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder setSalt(java.lang.String value) {
      validate(fields()[0], value);
      this.salt = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'salt' field has been set */
    public boolean hasSalt() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'salt' field */
    public com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder clearSalt() {
      salt = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'hashedPassword' field */
    public java.lang.String getHashedPassword() {
      return hashedPassword;
    }
    
    /** Sets the value of the 'hashedPassword' field */
    public com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder setHashedPassword(java.lang.String value) {
      validate(fields()[1], value);
      this.hashedPassword = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'hashedPassword' field has been set */
    public boolean hasHashedPassword() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'hashedPassword' field */
    public com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder clearHashedPassword() {
      hashedPassword = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'passwordResetToken' field */
    public java.lang.String getPasswordResetToken() {
      return passwordResetToken;
    }
    
    /** Sets the value of the 'passwordResetToken' field */
    public com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder setPasswordResetToken(java.lang.String value) {
      validate(fields()[2], value);
      this.passwordResetToken = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'passwordResetToken' field has been set */
    public boolean hasPasswordResetToken() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'passwordResetToken' field */
    public com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder clearPasswordResetToken() {
      passwordResetToken = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'passwordResetTokenExpirationTimeMillis' field */
    public java.lang.Long getPasswordResetTokenExpirationTimeMillis() {
      return passwordResetTokenExpirationTimeMillis;
    }
    
    /** Sets the value of the 'passwordResetTokenExpirationTimeMillis' field */
    public com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder setPasswordResetTokenExpirationTimeMillis(java.lang.Long value) {
      validate(fields()[3], value);
      this.passwordResetTokenExpirationTimeMillis = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'passwordResetTokenExpirationTimeMillis' field has been set */
    public boolean hasPasswordResetTokenExpirationTimeMillis() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'passwordResetTokenExpirationTimeMillis' field */
    public com.linkedin.pegasus2avro.identity.CorpUserCredentials.Builder clearPasswordResetTokenExpirationTimeMillis() {
      passwordResetTokenExpirationTimeMillis = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public CorpUserCredentials build() {
      try {
        CorpUserCredentials record = new CorpUserCredentials();
        record.salt = fieldSetFlags()[0] ? this.salt : (java.lang.String) defaultValue(fields()[0]);
        record.hashedPassword = fieldSetFlags()[1] ? this.hashedPassword : (java.lang.String) defaultValue(fields()[1]);
        record.passwordResetToken = fieldSetFlags()[2] ? this.passwordResetToken : (java.lang.String) defaultValue(fields()[2]);
        record.passwordResetTokenExpirationTimeMillis = fieldSetFlags()[3] ? this.passwordResetTokenExpirationTimeMillis : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
