/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.assertion;  
@SuppressWarnings("all")
/** Attributes that are applicable to single-Dataset Assertions */
@org.apache.avro.specific.AvroGenerated
public class DatasetAssertionInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DatasetAssertionInfo\",\"namespace\":\"com.linkedin.pegasus2avro.assertion\",\"doc\":\"Attributes that are applicable to single-Dataset Assertions\",\"fields\":[{\"name\":\"dataset\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The dataset targeted by this assertion.\",\"Relationship\":{\"entityTypes\":[\"dataset\"],\"name\":\"Asserts\"},\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"scope\",\"type\":{\"type\":\"enum\",\"name\":\"DatasetAssertionScope\",\"symbols\":[\"DATASET_COLUMN\",\"DATASET_ROWS\",\"DATASET_SCHEMA\",\"UNKNOWN\"],\"symbolDocs\":{\"DATASET_COLUMN\":\"This assertion applies to dataset columns\",\"DATASET_ROWS\":\"This assertion applies to entire rows of the dataset\",\"DATASET_SCHEMA\":\"This assertion applies to the schema of the dataset\",\"UNKNOWN\":\"The scope of the assertion is unknown\"}},\"doc\":\"Scope of the Assertion. What part of the dataset does this assertion apply to?\"},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"One or more dataset schema fields that are targeted by this assertion\",\"default\":null,\"Relationship\":{\"/*\":{\"entityTypes\":[\"schemaField\"],\"name\":\"Asserts\"}}},{\"name\":\"aggregation\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"AssertionStdAggregation\",\"doc\":\"The function that is applied to the aggregation input (schema, rows, column values) before evaluating an operator.\",\"symbols\":[\"ROW_COUNT\",\"COLUMNS\",\"COLUMN_COUNT\",\"IDENTITY\",\"MEAN\",\"MEDIAN\",\"UNIQUE_COUNT\",\"UNIQUE_PROPOTION\",\"NULL_COUNT\",\"NULL_PROPORTION\",\"STDDEV\",\"MIN\",\"MAX\",\"SUM\",\"_NATIVE_\"],\"symbolDocs\":{\"COLUMNS\":\"Assertion is applied on all columns.\",\"COLUMN_COUNT\":\"Assertion is applied on number of columns.\",\"IDENTITY\":\"Assertion is applied on individual column value.\",\"MAX\":\"Assertion is applied on column std deviation\",\"MEAN\":\"Assertion is applied on column mean\",\"MEDIAN\":\"Assertion is applied on column median\",\"MIN\":\"Assertion is applied on column min\",\"NULL_COUNT\":\"Assertion is applied on number of null values in column\",\"NULL_PROPORTION\":\"Assertion is applied on proportion of null values in column\",\"ROW_COUNT\":\"Assertion is applied on number of rows.\",\"STDDEV\":\"Assertion is applied on column std deviation\",\"SUM\":\"Assertion is applied on column sum\",\"UNIQUE_COUNT\":\"Assertion is applied on number of distinct values in column\",\"UNIQUE_PROPOTION\":\"Assertion is applied on proportion of distinct values in column\",\"_NATIVE_\":\"Other\"}}],\"doc\":\"Standardized assertion operator\",\"default\":null},{\"name\":\"operator\",\"type\":{\"type\":\"enum\",\"name\":\"AssertionStdOperator\",\"doc\":\"A boolean operator that is applied on the input to an assertion, after an aggregation function has been applied.\",\"symbols\":[\"BETWEEN\",\"LESS_THAN\",\"LESS_THAN_OR_EQUAL_TO\",\"GREATER_THAN\",\"GREATER_THAN_OR_EQUAL_TO\",\"EQUAL_TO\",\"NOT_NULL\",\"CONTAIN\",\"END_WITH\",\"START_WITH\",\"REGEX_MATCH\",\"IN\",\"NOT_IN\",\"_NATIVE_\"],\"symbolDocs\":{\"BETWEEN\":\"Value being asserted is between min_value and max_value.  Requires 'minValue' & 'maxValue' parameters.\",\"CONTAIN\":\"Value being asserted contains value. Requires 'value' parameter.\",\"END_WITH\":\"Value being asserted ends with value. Requires 'value' parameter.\",\"EQUAL_TO\":\"Value being asserted is equal to value. Requires 'value' parameter.\",\"GREATER_THAN\":\"Value being asserted is greater than some value. Requires 'value' parameter.\",\"GREATER_THAN_OR_EQUAL_TO\":\"Value being asserted is greater than or equal to some value. Requires 'value' parameter.\",\"IN\":\"Value being asserted is one of the array values. Requires 'value' parameter.\",\"LESS_THAN\":\"Value being asserted is less than a max value. Requires 'value' parameter.\",\"LESS_THAN_OR_EQUAL_TO\":\"Value being asserted is less than or equal to some value. Requires 'value' parameter.\",\"NOT_IN\":\"Value being asserted is not in one of the array values. Requires 'value' parameter.\",\"NOT_NULL\":\"Value being asserted is not null. Requires no parameters.\",\"REGEX_MATCH\":\"Value being asserted matches the regex value. Requires 'value' parameter.\",\"START_WITH\":\"Value being asserted starts with value. Requires 'value' parameter.\",\"_NATIVE_\":\"Other\"}},\"doc\":\"Standardized assertion operator\"},{\"name\":\"parameters\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AssertionStdParameters\",\"doc\":\"Parameters for AssertionStdOperators.\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AssertionStdParameter\",\"doc\":\"Single parameter for AssertionStdOperators.\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The parameter value\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"AssertionStdParameterType\",\"symbols\":[\"STRING\",\"NUMBER\",\"LIST\",\"SET\",\"UNKNOWN\"]},\"doc\":\"The type of the parameter\"}]}],\"doc\":\"The value parameter of an assertion\",\"default\":null},{\"name\":\"maxValue\",\"type\":[\"null\",\"AssertionStdParameter\"],\"doc\":\"The maxValue parameter of an assertion\",\"default\":null},{\"name\":\"minValue\",\"type\":[\"null\",\"AssertionStdParameter\"],\"doc\":\"The minValue parameter of an assertion\",\"default\":null}]}],\"doc\":\"Standard parameters required for the assertion. e.g. min_value, max_value, value, columns\",\"default\":null},{\"name\":\"nativeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Native assertion type\",\"default\":null},{\"name\":\"nativeParameters\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"Native parameters required for the assertion.\",\"default\":null},{\"name\":\"logic\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The dataset targeted by this assertion. */
  @Deprecated public java.lang.String dataset;
  /** Scope of the Assertion. What part of the dataset does this assertion apply to? */
  @Deprecated public com.linkedin.pegasus2avro.assertion.DatasetAssertionScope scope;
  /** One or more dataset schema fields that are targeted by this assertion */
  @Deprecated public java.util.List<java.lang.String> fields;
  /** Standardized assertion operator */
  @Deprecated public com.linkedin.pegasus2avro.assertion.AssertionStdAggregation aggregation;
  /** Standardized assertion operator */
  @Deprecated public com.linkedin.pegasus2avro.assertion.AssertionStdOperator operator;
  /** Standard parameters required for the assertion. e.g. min_value, max_value, value, columns */
  @Deprecated public com.linkedin.pegasus2avro.assertion.AssertionStdParameters parameters;
  /** Native assertion type */
  @Deprecated public java.lang.String nativeType;
  /** Native parameters required for the assertion. */
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> nativeParameters;
  @Deprecated public java.lang.String logic;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DatasetAssertionInfo() {}

  /**
   * All-args constructor.
   */
  public DatasetAssertionInfo(java.lang.String dataset, com.linkedin.pegasus2avro.assertion.DatasetAssertionScope scope, java.util.List<java.lang.String> fields, com.linkedin.pegasus2avro.assertion.AssertionStdAggregation aggregation, com.linkedin.pegasus2avro.assertion.AssertionStdOperator operator, com.linkedin.pegasus2avro.assertion.AssertionStdParameters parameters, java.lang.String nativeType, java.util.Map<java.lang.String,java.lang.String> nativeParameters, java.lang.String logic) {
    this.dataset = dataset;
    this.scope = scope;
    this.fields = fields;
    this.aggregation = aggregation;
    this.operator = operator;
    this.parameters = parameters;
    this.nativeType = nativeType;
    this.nativeParameters = nativeParameters;
    this.logic = logic;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dataset;
    case 1: return scope;
    case 2: return fields;
    case 3: return aggregation;
    case 4: return operator;
    case 5: return parameters;
    case 6: return nativeType;
    case 7: return nativeParameters;
    case 8: return logic;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dataset = (java.lang.String)value$; break;
    case 1: scope = (com.linkedin.pegasus2avro.assertion.DatasetAssertionScope)value$; break;
    case 2: fields = (java.util.List<java.lang.String>)value$; break;
    case 3: aggregation = (com.linkedin.pegasus2avro.assertion.AssertionStdAggregation)value$; break;
    case 4: operator = (com.linkedin.pegasus2avro.assertion.AssertionStdOperator)value$; break;
    case 5: parameters = (com.linkedin.pegasus2avro.assertion.AssertionStdParameters)value$; break;
    case 6: nativeType = (java.lang.String)value$; break;
    case 7: nativeParameters = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 8: logic = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dataset' field.
   * The dataset targeted by this assertion.   */
  public java.lang.String getDataset() {
    return dataset;
  }

  /**
   * Sets the value of the 'dataset' field.
   * The dataset targeted by this assertion.   * @param value the value to set.
   */
  public void setDataset(java.lang.String value) {
    this.dataset = value;
  }

  /**
   * Gets the value of the 'scope' field.
   * Scope of the Assertion. What part of the dataset does this assertion apply to?   */
  public com.linkedin.pegasus2avro.assertion.DatasetAssertionScope getScope() {
    return scope;
  }

  /**
   * Sets the value of the 'scope' field.
   * Scope of the Assertion. What part of the dataset does this assertion apply to?   * @param value the value to set.
   */
  public void setScope(com.linkedin.pegasus2avro.assertion.DatasetAssertionScope value) {
    this.scope = value;
  }

  /**
   * Gets the value of the 'fields' field.
   * One or more dataset schema fields that are targeted by this assertion   */
  public java.util.List<java.lang.String> getFields() {
    return fields;
  }

  /**
   * Sets the value of the 'fields' field.
   * One or more dataset schema fields that are targeted by this assertion   * @param value the value to set.
   */
  public void setFields(java.util.List<java.lang.String> value) {
    this.fields = value;
  }

  /**
   * Gets the value of the 'aggregation' field.
   * Standardized assertion operator   */
  public com.linkedin.pegasus2avro.assertion.AssertionStdAggregation getAggregation() {
    return aggregation;
  }

  /**
   * Sets the value of the 'aggregation' field.
   * Standardized assertion operator   * @param value the value to set.
   */
  public void setAggregation(com.linkedin.pegasus2avro.assertion.AssertionStdAggregation value) {
    this.aggregation = value;
  }

  /**
   * Gets the value of the 'operator' field.
   * Standardized assertion operator   */
  public com.linkedin.pegasus2avro.assertion.AssertionStdOperator getOperator() {
    return operator;
  }

  /**
   * Sets the value of the 'operator' field.
   * Standardized assertion operator   * @param value the value to set.
   */
  public void setOperator(com.linkedin.pegasus2avro.assertion.AssertionStdOperator value) {
    this.operator = value;
  }

  /**
   * Gets the value of the 'parameters' field.
   * Standard parameters required for the assertion. e.g. min_value, max_value, value, columns   */
  public com.linkedin.pegasus2avro.assertion.AssertionStdParameters getParameters() {
    return parameters;
  }

  /**
   * Sets the value of the 'parameters' field.
   * Standard parameters required for the assertion. e.g. min_value, max_value, value, columns   * @param value the value to set.
   */
  public void setParameters(com.linkedin.pegasus2avro.assertion.AssertionStdParameters value) {
    this.parameters = value;
  }

  /**
   * Gets the value of the 'nativeType' field.
   * Native assertion type   */
  public java.lang.String getNativeType() {
    return nativeType;
  }

  /**
   * Sets the value of the 'nativeType' field.
   * Native assertion type   * @param value the value to set.
   */
  public void setNativeType(java.lang.String value) {
    this.nativeType = value;
  }

  /**
   * Gets the value of the 'nativeParameters' field.
   * Native parameters required for the assertion.   */
  public java.util.Map<java.lang.String,java.lang.String> getNativeParameters() {
    return nativeParameters;
  }

  /**
   * Sets the value of the 'nativeParameters' field.
   * Native parameters required for the assertion.   * @param value the value to set.
   */
  public void setNativeParameters(java.util.Map<java.lang.String,java.lang.String> value) {
    this.nativeParameters = value;
  }

  /**
   * Gets the value of the 'logic' field.
   */
  public java.lang.String getLogic() {
    return logic;
  }

  /**
   * Sets the value of the 'logic' field.
   * @param value the value to set.
   */
  public void setLogic(java.lang.String value) {
    this.logic = value;
  }

  /** Creates a new DatasetAssertionInfo RecordBuilder */
  public static com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder();
  }
  
  /** Creates a new DatasetAssertionInfo RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder newBuilder(com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder other) {
    return new com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder(other);
  }
  
  /** Creates a new DatasetAssertionInfo RecordBuilder by copying an existing DatasetAssertionInfo instance */
  public static com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder newBuilder(com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo other) {
    return new com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for DatasetAssertionInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DatasetAssertionInfo>
    implements org.apache.avro.data.RecordBuilder<DatasetAssertionInfo> {

    private java.lang.String dataset;
    private com.linkedin.pegasus2avro.assertion.DatasetAssertionScope scope;
    private java.util.List<java.lang.String> fields;
    private com.linkedin.pegasus2avro.assertion.AssertionStdAggregation aggregation;
    private com.linkedin.pegasus2avro.assertion.AssertionStdOperator operator;
    private com.linkedin.pegasus2avro.assertion.AssertionStdParameters parameters;
    private java.lang.String nativeType;
    private java.util.Map<java.lang.String,java.lang.String> nativeParameters;
    private java.lang.String logic;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dataset)) {
        this.dataset = data().deepCopy(fields()[0].schema(), other.dataset);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scope)) {
        this.scope = data().deepCopy(fields()[1].schema(), other.scope);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fields)) {
        this.fields = data().deepCopy(fields()[2].schema(), other.fields);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.aggregation)) {
        this.aggregation = data().deepCopy(fields()[3].schema(), other.aggregation);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.operator)) {
        this.operator = data().deepCopy(fields()[4].schema(), other.operator);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parameters)) {
        this.parameters = data().deepCopy(fields()[5].schema(), other.parameters);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.nativeType)) {
        this.nativeType = data().deepCopy(fields()[6].schema(), other.nativeType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.nativeParameters)) {
        this.nativeParameters = data().deepCopy(fields()[7].schema(), other.nativeParameters);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.logic)) {
        this.logic = data().deepCopy(fields()[8].schema(), other.logic);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DatasetAssertionInfo instance */
    private Builder(com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo other) {
            super(com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.dataset)) {
        this.dataset = data().deepCopy(fields()[0].schema(), other.dataset);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scope)) {
        this.scope = data().deepCopy(fields()[1].schema(), other.scope);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fields)) {
        this.fields = data().deepCopy(fields()[2].schema(), other.fields);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.aggregation)) {
        this.aggregation = data().deepCopy(fields()[3].schema(), other.aggregation);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.operator)) {
        this.operator = data().deepCopy(fields()[4].schema(), other.operator);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parameters)) {
        this.parameters = data().deepCopy(fields()[5].schema(), other.parameters);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.nativeType)) {
        this.nativeType = data().deepCopy(fields()[6].schema(), other.nativeType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.nativeParameters)) {
        this.nativeParameters = data().deepCopy(fields()[7].schema(), other.nativeParameters);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.logic)) {
        this.logic = data().deepCopy(fields()[8].schema(), other.logic);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'dataset' field */
    public java.lang.String getDataset() {
      return dataset;
    }
    
    /** Sets the value of the 'dataset' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder setDataset(java.lang.String value) {
      validate(fields()[0], value);
      this.dataset = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'dataset' field has been set */
    public boolean hasDataset() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'dataset' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder clearDataset() {
      dataset = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'scope' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionScope getScope() {
      return scope;
    }
    
    /** Sets the value of the 'scope' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder setScope(com.linkedin.pegasus2avro.assertion.DatasetAssertionScope value) {
      validate(fields()[1], value);
      this.scope = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'scope' field has been set */
    public boolean hasScope() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'scope' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder clearScope() {
      scope = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'fields' field */
    public java.util.List<java.lang.String> getFields() {
      return fields;
    }
    
    /** Sets the value of the 'fields' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder setFields(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.fields = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'fields' field has been set */
    public boolean hasFields() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'fields' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder clearFields() {
      fields = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'aggregation' field */
    public com.linkedin.pegasus2avro.assertion.AssertionStdAggregation getAggregation() {
      return aggregation;
    }
    
    /** Sets the value of the 'aggregation' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder setAggregation(com.linkedin.pegasus2avro.assertion.AssertionStdAggregation value) {
      validate(fields()[3], value);
      this.aggregation = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'aggregation' field has been set */
    public boolean hasAggregation() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'aggregation' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder clearAggregation() {
      aggregation = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'operator' field */
    public com.linkedin.pegasus2avro.assertion.AssertionStdOperator getOperator() {
      return operator;
    }
    
    /** Sets the value of the 'operator' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder setOperator(com.linkedin.pegasus2avro.assertion.AssertionStdOperator value) {
      validate(fields()[4], value);
      this.operator = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'operator' field has been set */
    public boolean hasOperator() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'operator' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder clearOperator() {
      operator = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'parameters' field */
    public com.linkedin.pegasus2avro.assertion.AssertionStdParameters getParameters() {
      return parameters;
    }
    
    /** Sets the value of the 'parameters' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder setParameters(com.linkedin.pegasus2avro.assertion.AssertionStdParameters value) {
      validate(fields()[5], value);
      this.parameters = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'parameters' field has been set */
    public boolean hasParameters() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'parameters' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder clearParameters() {
      parameters = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'nativeType' field */
    public java.lang.String getNativeType() {
      return nativeType;
    }
    
    /** Sets the value of the 'nativeType' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder setNativeType(java.lang.String value) {
      validate(fields()[6], value);
      this.nativeType = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'nativeType' field has been set */
    public boolean hasNativeType() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'nativeType' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder clearNativeType() {
      nativeType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'nativeParameters' field */
    public java.util.Map<java.lang.String,java.lang.String> getNativeParameters() {
      return nativeParameters;
    }
    
    /** Sets the value of the 'nativeParameters' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder setNativeParameters(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[7], value);
      this.nativeParameters = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'nativeParameters' field has been set */
    public boolean hasNativeParameters() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'nativeParameters' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder clearNativeParameters() {
      nativeParameters = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'logic' field */
    public java.lang.String getLogic() {
      return logic;
    }
    
    /** Sets the value of the 'logic' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder setLogic(java.lang.String value) {
      validate(fields()[8], value);
      this.logic = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'logic' field has been set */
    public boolean hasLogic() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'logic' field */
    public com.linkedin.pegasus2avro.assertion.DatasetAssertionInfo.Builder clearLogic() {
      logic = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public DatasetAssertionInfo build() {
      try {
        DatasetAssertionInfo record = new DatasetAssertionInfo();
        record.dataset = fieldSetFlags()[0] ? this.dataset : (java.lang.String) defaultValue(fields()[0]);
        record.scope = fieldSetFlags()[1] ? this.scope : (com.linkedin.pegasus2avro.assertion.DatasetAssertionScope) defaultValue(fields()[1]);
        record.fields = fieldSetFlags()[2] ? this.fields : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.aggregation = fieldSetFlags()[3] ? this.aggregation : (com.linkedin.pegasus2avro.assertion.AssertionStdAggregation) defaultValue(fields()[3]);
        record.operator = fieldSetFlags()[4] ? this.operator : (com.linkedin.pegasus2avro.assertion.AssertionStdOperator) defaultValue(fields()[4]);
        record.parameters = fieldSetFlags()[5] ? this.parameters : (com.linkedin.pegasus2avro.assertion.AssertionStdParameters) defaultValue(fields()[5]);
        record.nativeType = fieldSetFlags()[6] ? this.nativeType : (java.lang.String) defaultValue(fields()[6]);
        record.nativeParameters = fieldSetFlags()[7] ? this.nativeParameters : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[7]);
        record.logic = fieldSetFlags()[8] ? this.logic : (java.lang.String) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
