/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.common;  
@SuppressWarnings("all")
/** Properties of an applied glossary term. */
@org.apache.avro.specific.AvroGenerated
public class GlossaryTermAssociation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GlossaryTermAssociation\",\"namespace\":\"com.linkedin.pegasus2avro.common\",\"doc\":\"Properties of an applied glossary term.\",\"fields\":[{\"name\":\"urn\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Urn of the applied glossary term\",\"Relationship\":{\"entityTypes\":[\"glossaryTerm\"],\"name\":\"TermedWith\"},\"Searchable\":{\"addToFilters\":true,\"fieldName\":\"glossaryTerms\",\"fieldType\":\"URN\",\"filterNameOverride\":\"Glossary Term\",\"hasValuesFieldName\":\"hasGlossaryTerms\"},\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.GlossaryTermUrn\"}},{\"name\":\"context\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Additional context about the association\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Urn of the applied glossary term */
  @Deprecated public java.lang.String urn;
  /** Additional context about the association */
  @Deprecated public java.lang.String context;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GlossaryTermAssociation() {}

  /**
   * All-args constructor.
   */
  public GlossaryTermAssociation(java.lang.String urn, java.lang.String context) {
    this.urn = urn;
    this.context = context;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return urn;
    case 1: return context;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: urn = (java.lang.String)value$; break;
    case 1: context = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'urn' field.
   * Urn of the applied glossary term   */
  public java.lang.String getUrn() {
    return urn;
  }

  /**
   * Sets the value of the 'urn' field.
   * Urn of the applied glossary term   * @param value the value to set.
   */
  public void setUrn(java.lang.String value) {
    this.urn = value;
  }

  /**
   * Gets the value of the 'context' field.
   * Additional context about the association   */
  public java.lang.String getContext() {
    return context;
  }

  /**
   * Sets the value of the 'context' field.
   * Additional context about the association   * @param value the value to set.
   */
  public void setContext(java.lang.String value) {
    this.context = value;
  }

  /** Creates a new GlossaryTermAssociation RecordBuilder */
  public static com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder();
  }
  
  /** Creates a new GlossaryTermAssociation RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder newBuilder(com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder other) {
    return new com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder(other);
  }
  
  /** Creates a new GlossaryTermAssociation RecordBuilder by copying an existing GlossaryTermAssociation instance */
  public static com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder newBuilder(com.linkedin.pegasus2avro.common.GlossaryTermAssociation other) {
    return new com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder(other);
  }
  
  /**
   * RecordBuilder for GlossaryTermAssociation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GlossaryTermAssociation>
    implements org.apache.avro.data.RecordBuilder<GlossaryTermAssociation> {

    private java.lang.String urn;
    private java.lang.String context;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.common.GlossaryTermAssociation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.urn)) {
        this.urn = data().deepCopy(fields()[0].schema(), other.urn);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.context)) {
        this.context = data().deepCopy(fields()[1].schema(), other.context);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GlossaryTermAssociation instance */
    private Builder(com.linkedin.pegasus2avro.common.GlossaryTermAssociation other) {
            super(com.linkedin.pegasus2avro.common.GlossaryTermAssociation.SCHEMA$);
      if (isValidValue(fields()[0], other.urn)) {
        this.urn = data().deepCopy(fields()[0].schema(), other.urn);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.context)) {
        this.context = data().deepCopy(fields()[1].schema(), other.context);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'urn' field */
    public java.lang.String getUrn() {
      return urn;
    }
    
    /** Sets the value of the 'urn' field */
    public com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder setUrn(java.lang.String value) {
      validate(fields()[0], value);
      this.urn = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'urn' field has been set */
    public boolean hasUrn() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'urn' field */
    public com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder clearUrn() {
      urn = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'context' field */
    public java.lang.String getContext() {
      return context;
    }
    
    /** Sets the value of the 'context' field */
    public com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder setContext(java.lang.String value) {
      validate(fields()[1], value);
      this.context = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'context' field has been set */
    public boolean hasContext() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'context' field */
    public com.linkedin.pegasus2avro.common.GlossaryTermAssociation.Builder clearContext() {
      context = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public GlossaryTermAssociation build() {
      try {
        GlossaryTermAssociation record = new GlossaryTermAssociation();
        record.urn = fieldSetFlags()[0] ? this.urn : (java.lang.String) defaultValue(fields()[0]);
        record.context = fieldSetFlags()[1] ? this.context : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
