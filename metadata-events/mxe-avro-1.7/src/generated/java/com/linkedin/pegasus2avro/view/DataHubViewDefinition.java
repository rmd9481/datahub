/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.view;  
@SuppressWarnings("all")
/** A View definition. */
@org.apache.avro.specific.AvroGenerated
public class DataHubViewDefinition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataHubViewDefinition\",\"namespace\":\"com.linkedin.pegasus2avro.view\",\"doc\":\"A View definition.\",\"fields\":[{\"name\":\"entityTypes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"The Entity Types in the scope of the View.\"},{\"name\":\"filter\",\"type\":{\"type\":\"record\",\"name\":\"Filter\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.query.filter\",\"doc\":\"The filter for finding a record or a collection of records\",\"fields\":[{\"name\":\"or\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ConjunctiveCriterion\",\"doc\":\"A list of criterion and'd together.\",\"fields\":[{\"name\":\"and\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Criterion\",\"doc\":\"A criterion for matching a field with given value\",\"fields\":[{\"name\":\"field\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the field that the criterion refers to\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The value of the intended field\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"Values. one of which the intended field should match\\nNote, if values is set, the above \\\"value\\\" field will be ignored\",\"default\":[]},{\"name\":\"condition\",\"type\":{\"type\":\"enum\",\"name\":\"Condition\",\"doc\":\"The matching condition in a filter criterion\",\"symbols\":[\"CONTAIN\",\"END_WITH\",\"EQUAL\",\"IS_NULL\",\"EXISTS\",\"GREATER_THAN\",\"GREATER_THAN_OR_EQUAL_TO\",\"IN\",\"LESS_THAN\",\"LESS_THAN_OR_EQUAL_TO\",\"START_WITH\"],\"symbolDocs\":{\"CONTAIN\":\"Represent the relation: String field contains value, e.g. name contains Profile\",\"END_WITH\":\"Represent the relation: String field ends with value, e.g. name ends with Event\",\"EQUAL\":\"Represent the relation: field = value, e.g. platform = hdfs\",\"EXISTS\":\"Represents the relation: field exists and is non-empty, e.g. owners is not null and != [] (empty)\",\"GREATER_THAN\":\"Represent the relation greater than, e.g. ownerCount > 5\",\"GREATER_THAN_OR_EQUAL_TO\":\"Represent the relation greater than or equal to, e.g. ownerCount >= 5\",\"IN\":\"Represent the relation: String field is one of the array values to, e.g. name in [\\\"Profile\\\", \\\"Event\\\"]\",\"IS_NULL\":\"Represent the relation: field is null, e.g. platform is null\",\"LESS_THAN\":\"Represent the relation less than, e.g. ownerCount < 3\",\"LESS_THAN_OR_EQUAL_TO\":\"Represent the relation less than or equal to, e.g. ownerCount <= 3\",\"START_WITH\":\"Represent the relation: String field starts with value, e.g. name starts with PageView\"}},\"doc\":\"The condition for the criterion, e.g. EQUAL, START_WITH\",\"default\":\"EQUAL\"},{\"name\":\"negated\",\"type\":\"boolean\",\"doc\":\"Whether the condition should be negated\",\"default\":false}]}},\"doc\":\"A list of and criteria the filter applies to the query\"}]}}],\"doc\":\"A list of disjunctive criterion for the filter. (or operation to combine filters)\",\"default\":null},{\"name\":\"criteria\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Criterion\"}],\"doc\":\"Deprecated! A list of conjunctive criterion for the filter. If \\\"or\\\" field is provided, then this field is ignored.\",\"default\":null}]},\"doc\":\"The filter criteria, which represents the view itself\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The Entity Types in the scope of the View. */
  @Deprecated public java.util.List<java.lang.String> entityTypes;
  /** The filter criteria, which represents the view itself */
  @Deprecated public com.linkedin.pegasus2avro.metadata.query.filter.Filter filter;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DataHubViewDefinition() {}

  /**
   * All-args constructor.
   */
  public DataHubViewDefinition(java.util.List<java.lang.String> entityTypes, com.linkedin.pegasus2avro.metadata.query.filter.Filter filter) {
    this.entityTypes = entityTypes;
    this.filter = filter;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return entityTypes;
    case 1: return filter;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: entityTypes = (java.util.List<java.lang.String>)value$; break;
    case 1: filter = (com.linkedin.pegasus2avro.metadata.query.filter.Filter)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'entityTypes' field.
   * The Entity Types in the scope of the View.   */
  public java.util.List<java.lang.String> getEntityTypes() {
    return entityTypes;
  }

  /**
   * Sets the value of the 'entityTypes' field.
   * The Entity Types in the scope of the View.   * @param value the value to set.
   */
  public void setEntityTypes(java.util.List<java.lang.String> value) {
    this.entityTypes = value;
  }

  /**
   * Gets the value of the 'filter' field.
   * The filter criteria, which represents the view itself   */
  public com.linkedin.pegasus2avro.metadata.query.filter.Filter getFilter() {
    return filter;
  }

  /**
   * Sets the value of the 'filter' field.
   * The filter criteria, which represents the view itself   * @param value the value to set.
   */
  public void setFilter(com.linkedin.pegasus2avro.metadata.query.filter.Filter value) {
    this.filter = value;
  }

  /** Creates a new DataHubViewDefinition RecordBuilder */
  public static com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder();
  }
  
  /** Creates a new DataHubViewDefinition RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder newBuilder(com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder other) {
    return new com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder(other);
  }
  
  /** Creates a new DataHubViewDefinition RecordBuilder by copying an existing DataHubViewDefinition instance */
  public static com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder newBuilder(com.linkedin.pegasus2avro.view.DataHubViewDefinition other) {
    return new com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder(other);
  }
  
  /**
   * RecordBuilder for DataHubViewDefinition instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataHubViewDefinition>
    implements org.apache.avro.data.RecordBuilder<DataHubViewDefinition> {

    private java.util.List<java.lang.String> entityTypes;
    private com.linkedin.pegasus2avro.metadata.query.filter.Filter filter;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.view.DataHubViewDefinition.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.entityTypes)) {
        this.entityTypes = data().deepCopy(fields()[0].schema(), other.entityTypes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.filter)) {
        this.filter = data().deepCopy(fields()[1].schema(), other.filter);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DataHubViewDefinition instance */
    private Builder(com.linkedin.pegasus2avro.view.DataHubViewDefinition other) {
            super(com.linkedin.pegasus2avro.view.DataHubViewDefinition.SCHEMA$);
      if (isValidValue(fields()[0], other.entityTypes)) {
        this.entityTypes = data().deepCopy(fields()[0].schema(), other.entityTypes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.filter)) {
        this.filter = data().deepCopy(fields()[1].schema(), other.filter);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'entityTypes' field */
    public java.util.List<java.lang.String> getEntityTypes() {
      return entityTypes;
    }
    
    /** Sets the value of the 'entityTypes' field */
    public com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder setEntityTypes(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.entityTypes = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'entityTypes' field has been set */
    public boolean hasEntityTypes() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'entityTypes' field */
    public com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder clearEntityTypes() {
      entityTypes = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'filter' field */
    public com.linkedin.pegasus2avro.metadata.query.filter.Filter getFilter() {
      return filter;
    }
    
    /** Sets the value of the 'filter' field */
    public com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder setFilter(com.linkedin.pegasus2avro.metadata.query.filter.Filter value) {
      validate(fields()[1], value);
      this.filter = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'filter' field has been set */
    public boolean hasFilter() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'filter' field */
    public com.linkedin.pegasus2avro.view.DataHubViewDefinition.Builder clearFilter() {
      filter = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public DataHubViewDefinition build() {
      try {
        DataHubViewDefinition record = new DataHubViewDefinition();
        record.entityTypes = fieldSetFlags()[0] ? this.entityTypes : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.filter = fieldSetFlags()[1] ? this.filter : (com.linkedin.pegasus2avro.metadata.query.filter.Filter) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
