/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.usage;  
@SuppressWarnings("all")
/** Results of a query for usage data. */
@org.apache.avro.specific.AvroGenerated
public class UsageQueryResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UsageQueryResult\",\"namespace\":\"com.linkedin.pegasus2avro.usage\",\"doc\":\"Results of a query for usage data.\",\"fields\":[{\"name\":\"buckets\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UsageAggregation\",\"doc\":\"Usage data for a given resource, rolled up into a bucket.\",\"fields\":[{\"name\":\"bucket\",\"type\":\"long\",\"doc\":\" Bucket start time in milliseconds \"},{\"name\":\"duration\",\"type\":{\"type\":\"enum\",\"name\":\"WindowDuration\",\"namespace\":\"com.linkedin.pegasus2avro.common\",\"doc\":\"Enum to define the length of a bucket when doing aggregations\",\"symbols\":[\"YEAR\",\"MONTH\",\"WEEK\",\"DAY\",\"HOUR\"]},\"doc\":\" Bucket duration \"},{\"name\":\"resource\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\" Resource associated with these usage stats \",\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"metrics\",\"type\":{\"type\":\"record\",\"name\":\"UsageAggregationMetrics\",\"doc\":\"Metrics for usage data for a given resource and bucket. Not all fields\\nmake sense for all buckets, so every field is optional.\",\"fields\":[{\"name\":\"uniqueUserCount\",\"type\":[\"null\",\"int\"],\"doc\":\" Unique user count \",\"default\":null},{\"name\":\"users\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UserUsageCounts\",\"doc\":\" Records a single user's usage counts for a given resource \",\"fields\":[{\"name\":\"user\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"count\",\"type\":\"int\"},{\"name\":\"userEmail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\" If user_email is set, we attempt to resolve the user's urn upon ingest \",\"default\":null}]}}],\"doc\":\" Users within this bucket, with frequency counts \",\"default\":null},{\"name\":\"totalSqlQueries\",\"type\":[\"null\",\"int\"],\"doc\":\" Total SQL query count \",\"default\":null},{\"name\":\"topSqlQueries\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\" Frequent SQL queries; mostly makes sense for datasets in SQL databases \",\"default\":null},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FieldUsageCounts\",\"doc\":\" Records field-level usage counts for a given resource \",\"fields\":[{\"name\":\"fieldName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"count\",\"type\":\"int\"}]}}],\"doc\":\" Field-level usage stats \",\"default\":null}]},\"doc\":\" Metrics associated with this bucket \"}],\"deprecated\":\"Use DatasetUsageStatistics, or other UsageStatistics records, instead\"}}],\"doc\":\" Raw buckets \",\"default\":null},{\"name\":\"aggregations\",\"type\":{\"type\":\"record\",\"name\":\"UsageQueryResultAggregations\",\"fields\":[{\"name\":\"uniqueUserCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"totalSqlQueries\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"users\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"UserUsageCounts\"}],\"default\":null},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"FieldUsageCounts\"}],\"default\":null}]},\"doc\":\"Aggregated metrics. All fields are optional here, since they will be populated\\nonly if the underlying buckets contain the data required to generate that aggregation.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /**  Raw buckets  */
  @Deprecated public java.util.List<com.linkedin.pegasus2avro.usage.UsageAggregation> buckets;
  /** Aggregated metrics. All fields are optional here, since they will be populated
only if the underlying buckets contain the data required to generate that aggregation. */
  @Deprecated public com.linkedin.pegasus2avro.usage.UsageQueryResultAggregations aggregations;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UsageQueryResult() {}

  /**
   * All-args constructor.
   */
  public UsageQueryResult(java.util.List<com.linkedin.pegasus2avro.usage.UsageAggregation> buckets, com.linkedin.pegasus2avro.usage.UsageQueryResultAggregations aggregations) {
    this.buckets = buckets;
    this.aggregations = aggregations;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return buckets;
    case 1: return aggregations;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: buckets = (java.util.List<com.linkedin.pegasus2avro.usage.UsageAggregation>)value$; break;
    case 1: aggregations = (com.linkedin.pegasus2avro.usage.UsageQueryResultAggregations)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'buckets' field.
   *  Raw buckets    */
  public java.util.List<com.linkedin.pegasus2avro.usage.UsageAggregation> getBuckets() {
    return buckets;
  }

  /**
   * Sets the value of the 'buckets' field.
   *  Raw buckets    * @param value the value to set.
   */
  public void setBuckets(java.util.List<com.linkedin.pegasus2avro.usage.UsageAggregation> value) {
    this.buckets = value;
  }

  /**
   * Gets the value of the 'aggregations' field.
   * Aggregated metrics. All fields are optional here, since they will be populated
only if the underlying buckets contain the data required to generate that aggregation.   */
  public com.linkedin.pegasus2avro.usage.UsageQueryResultAggregations getAggregations() {
    return aggregations;
  }

  /**
   * Sets the value of the 'aggregations' field.
   * Aggregated metrics. All fields are optional here, since they will be populated
only if the underlying buckets contain the data required to generate that aggregation.   * @param value the value to set.
   */
  public void setAggregations(com.linkedin.pegasus2avro.usage.UsageQueryResultAggregations value) {
    this.aggregations = value;
  }

  /** Creates a new UsageQueryResult RecordBuilder */
  public static com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder();
  }
  
  /** Creates a new UsageQueryResult RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder newBuilder(com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder other) {
    return new com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder(other);
  }
  
  /** Creates a new UsageQueryResult RecordBuilder by copying an existing UsageQueryResult instance */
  public static com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder newBuilder(com.linkedin.pegasus2avro.usage.UsageQueryResult other) {
    return new com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder(other);
  }
  
  /**
   * RecordBuilder for UsageQueryResult instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UsageQueryResult>
    implements org.apache.avro.data.RecordBuilder<UsageQueryResult> {

    private java.util.List<com.linkedin.pegasus2avro.usage.UsageAggregation> buckets;
    private com.linkedin.pegasus2avro.usage.UsageQueryResultAggregations aggregations;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.usage.UsageQueryResult.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.buckets)) {
        this.buckets = data().deepCopy(fields()[0].schema(), other.buckets);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aggregations)) {
        this.aggregations = data().deepCopy(fields()[1].schema(), other.aggregations);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing UsageQueryResult instance */
    private Builder(com.linkedin.pegasus2avro.usage.UsageQueryResult other) {
            super(com.linkedin.pegasus2avro.usage.UsageQueryResult.SCHEMA$);
      if (isValidValue(fields()[0], other.buckets)) {
        this.buckets = data().deepCopy(fields()[0].schema(), other.buckets);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aggregations)) {
        this.aggregations = data().deepCopy(fields()[1].schema(), other.aggregations);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'buckets' field */
    public java.util.List<com.linkedin.pegasus2avro.usage.UsageAggregation> getBuckets() {
      return buckets;
    }
    
    /** Sets the value of the 'buckets' field */
    public com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder setBuckets(java.util.List<com.linkedin.pegasus2avro.usage.UsageAggregation> value) {
      validate(fields()[0], value);
      this.buckets = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'buckets' field has been set */
    public boolean hasBuckets() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'buckets' field */
    public com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder clearBuckets() {
      buckets = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'aggregations' field */
    public com.linkedin.pegasus2avro.usage.UsageQueryResultAggregations getAggregations() {
      return aggregations;
    }
    
    /** Sets the value of the 'aggregations' field */
    public com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder setAggregations(com.linkedin.pegasus2avro.usage.UsageQueryResultAggregations value) {
      validate(fields()[1], value);
      this.aggregations = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'aggregations' field has been set */
    public boolean hasAggregations() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'aggregations' field */
    public com.linkedin.pegasus2avro.usage.UsageQueryResult.Builder clearAggregations() {
      aggregations = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public UsageQueryResult build() {
      try {
        UsageQueryResult record = new UsageQueryResult();
        record.buckets = fieldSetFlags()[0] ? this.buckets : (java.util.List<com.linkedin.pegasus2avro.usage.UsageAggregation>) defaultValue(fields()[0]);
        record.aggregations = fieldSetFlags()[1] ? this.aggregations : (com.linkedin.pegasus2avro.usage.UsageQueryResultAggregations) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
